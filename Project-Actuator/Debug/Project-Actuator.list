
Project-Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080041e4  080041e4  000051e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004210  08004210  00006034  2**0
                  CONTENTS
  4 .ARM          00000000  08004210  08004210  00006034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004210  08004210  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004210  08004210  00005210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004218  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000034  0800424c  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800424c  000061bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3fe  00000000  00000000  0000605d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a3  00000000  00000000  0001445b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00016b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a93  00000000  00000000  000178b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018862  00000000  00000000  00018343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cc2  00000000  00000000  00030ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9b4  00000000  00000000  00041867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce21b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000394c  00000000  00000000  000ce260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d1bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000034 	.word	0x20000034
 800012c:	00000000 	.word	0x00000000
 8000130:	080041cc 	.word	0x080041cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000038 	.word	0x20000038
 800014c:	080041cc 	.word	0x080041cc

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	@ 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <__aeabi_fmul>:
 8000978:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800097c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000980:	bf1e      	ittt	ne
 8000982:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000986:	ea92 0f0c 	teqne	r2, ip
 800098a:	ea93 0f0c 	teqne	r3, ip
 800098e:	d06f      	beq.n	8000a70 <__aeabi_fmul+0xf8>
 8000990:	441a      	add	r2, r3
 8000992:	ea80 0c01 	eor.w	ip, r0, r1
 8000996:	0240      	lsls	r0, r0, #9
 8000998:	bf18      	it	ne
 800099a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800099e:	d01e      	beq.n	80009de <__aeabi_fmul+0x66>
 80009a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009ac:	fba0 3101 	umull	r3, r1, r0, r1
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009b8:	bf3e      	ittt	cc
 80009ba:	0049      	lslcc	r1, r1, #1
 80009bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009c0:	005b      	lslcc	r3, r3, #1
 80009c2:	ea40 0001 	orr.w	r0, r0, r1
 80009c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009ca:	2afd      	cmp	r2, #253	@ 0xfd
 80009cc:	d81d      	bhi.n	8000a0a <__aeabi_fmul+0x92>
 80009ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	4770      	bx	lr
 80009de:	f090 0f00 	teq	r0, #0
 80009e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009e6:	bf08      	it	eq
 80009e8:	0249      	lsleq	r1, r1, #9
 80009ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009f2:	3a7f      	subs	r2, #127	@ 0x7f
 80009f4:	bfc2      	ittt	gt
 80009f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009fe:	4770      	bxgt	lr
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	dc5d      	bgt.n	8000ac8 <__aeabi_fmul+0x150>
 8000a0c:	f112 0f19 	cmn.w	r2, #25
 8000a10:	bfdc      	itt	le
 8000a12:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a16:	4770      	bxle	lr
 8000a18:	f1c2 0200 	rsb	r2, r2, #0
 8000a1c:	0041      	lsls	r1, r0, #1
 8000a1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a22:	f1c2 0220 	rsb	r2, r2, #32
 8000a26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a2e:	f140 0000 	adc.w	r0, r0, #0
 8000a32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a36:	bf08      	it	eq
 8000a38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a3c:	4770      	bx	lr
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a46:	bf02      	ittt	eq
 8000a48:	0040      	lsleq	r0, r0, #1
 8000a4a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a4e:	3a01      	subeq	r2, #1
 8000a50:	d0f9      	beq.n	8000a46 <__aeabi_fmul+0xce>
 8000a52:	ea40 000c 	orr.w	r0, r0, ip
 8000a56:	f093 0f00 	teq	r3, #0
 8000a5a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5e:	bf02      	ittt	eq
 8000a60:	0049      	lsleq	r1, r1, #1
 8000a62:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a66:	3b01      	subeq	r3, #1
 8000a68:	d0f9      	beq.n	8000a5e <__aeabi_fmul+0xe6>
 8000a6a:	ea41 010c 	orr.w	r1, r1, ip
 8000a6e:	e78f      	b.n	8000990 <__aeabi_fmul+0x18>
 8000a70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a74:	ea92 0f0c 	teq	r2, ip
 8000a78:	bf18      	it	ne
 8000a7a:	ea93 0f0c 	teqne	r3, ip
 8000a7e:	d00a      	beq.n	8000a96 <__aeabi_fmul+0x11e>
 8000a80:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a84:	bf18      	it	ne
 8000a86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a8a:	d1d8      	bne.n	8000a3e <__aeabi_fmul+0xc6>
 8000a8c:	ea80 0001 	eor.w	r0, r0, r1
 8000a90:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f090 0f00 	teq	r0, #0
 8000a9a:	bf17      	itett	ne
 8000a9c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	f091 0f00 	teqne	r1, #0
 8000aa6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000aaa:	d014      	beq.n	8000ad6 <__aeabi_fmul+0x15e>
 8000aac:	ea92 0f0c 	teq	r2, ip
 8000ab0:	d101      	bne.n	8000ab6 <__aeabi_fmul+0x13e>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	d10f      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ab6:	ea93 0f0c 	teq	r3, ip
 8000aba:	d103      	bne.n	8000ac4 <__aeabi_fmul+0x14c>
 8000abc:	024b      	lsls	r3, r1, #9
 8000abe:	bf18      	it	ne
 8000ac0:	4608      	movne	r0, r1
 8000ac2:	d108      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ac4:	ea80 0001 	eor.w	r0, r0, r1
 8000ac8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ada:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_fdiv>:
 8000ae0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ae4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae8:	bf1e      	ittt	ne
 8000aea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aee:	ea92 0f0c 	teqne	r2, ip
 8000af2:	ea93 0f0c 	teqne	r3, ip
 8000af6:	d069      	beq.n	8000bcc <__aeabi_fdiv+0xec>
 8000af8:	eba2 0203 	sub.w	r2, r2, r3
 8000afc:	ea80 0c01 	eor.w	ip, r0, r1
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b06:	d037      	beq.n	8000b78 <__aeabi_fdiv+0x98>
 8000b08:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	bf38      	it	cc
 8000b1c:	005b      	lslcc	r3, r3, #1
 8000b1e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b22:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b26:	428b      	cmp	r3, r1
 8000b28:	bf24      	itt	cs
 8000b2a:	1a5b      	subcs	r3, r3, r1
 8000b2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b34:	bf24      	itt	cs
 8000b36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b42:	bf24      	itt	cs
 8000b44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b50:	bf24      	itt	cs
 8000b52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	bf18      	it	ne
 8000b5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b62:	d1e0      	bne.n	8000b26 <__aeabi_fdiv+0x46>
 8000b64:	2afd      	cmp	r2, #253	@ 0xfd
 8000b66:	f63f af50 	bhi.w	8000a0a <__aeabi_fmul+0x92>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b80:	327f      	adds	r2, #127	@ 0x7f
 8000b82:	bfc2      	ittt	gt
 8000b84:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8c:	4770      	bxgt	lr
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	3a01      	subs	r2, #1
 8000b98:	e737      	b.n	8000a0a <__aeabi_fmul+0x92>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ba2:	bf02      	ittt	eq
 8000ba4:	0040      	lsleq	r0, r0, #1
 8000ba6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000baa:	3a01      	subeq	r2, #1
 8000bac:	d0f9      	beq.n	8000ba2 <__aeabi_fdiv+0xc2>
 8000bae:	ea40 000c 	orr.w	r0, r0, ip
 8000bb2:	f093 0f00 	teq	r3, #0
 8000bb6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0049      	lsleq	r1, r1, #1
 8000bbe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bc2:	3b01      	subeq	r3, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fdiv+0xda>
 8000bc6:	ea41 010c 	orr.w	r1, r1, ip
 8000bca:	e795      	b.n	8000af8 <__aeabi_fdiv+0x18>
 8000bcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d108      	bne.n	8000be8 <__aeabi_fdiv+0x108>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	f47f af7d 	bne.w	8000ad6 <__aeabi_fmul+0x15e>
 8000bdc:	ea93 0f0c 	teq	r3, ip
 8000be0:	f47f af70 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000be4:	4608      	mov	r0, r1
 8000be6:	e776      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_fdiv+0x118>
 8000bee:	024b      	lsls	r3, r1, #9
 8000bf0:	f43f af4c 	beq.w	8000a8c <__aeabi_fmul+0x114>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000bf8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bfc:	bf18      	it	ne
 8000bfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c02:	d1ca      	bne.n	8000b9a <__aeabi_fdiv+0xba>
 8000c04:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c08:	f47f af5c 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000c0c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c10:	f47f af3c 	bne.w	8000a8c <__aeabi_fmul+0x114>
 8000c14:	e75f      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000c16:	bf00      	nop

08000c18 <__aeabi_f2uiz>:
 8000c18:	0042      	lsls	r2, r0, #1
 8000c1a:	d20e      	bcs.n	8000c3a <__aeabi_f2uiz+0x22>
 8000c1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c20:	d30b      	bcc.n	8000c3a <__aeabi_f2uiz+0x22>
 8000c22:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c2a:	d409      	bmi.n	8000c40 <__aeabi_f2uiz+0x28>
 8000c2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c34:	fa23 f002 	lsr.w	r0, r3, r2
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr
 8000c40:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c44:	d101      	bne.n	8000c4a <__aeabi_f2uiz+0x32>
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	d102      	bne.n	8000c50 <__aeabi_f2uiz+0x38>
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <CAN_ComInit_Std>:
	CAN_TxHeaderTypeDef *tx_header,
	CAN_HandleTypeDef *hcan,
	uint32_t id,
	uint8_t dlc
)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	70fb      	strb	r3, [r7, #3]
	tx_header->IDE 		= CAN_ID_STD;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
	tx_header->DLC 		= dlc;
 8000c6c:	78fa      	ldrb	r2, [r7, #3]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	611a      	str	r2, [r3, #16]
	tx_header->StdId 	= id;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	601a      	str	r2, [r3, #0]
	tx_header->RTR 		= CAN_RTR_DATA;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]

	HAL_CAN_Start(hcan);
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f001 f830 	bl	8001ce4 <HAL_CAN_Start>
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <CAN_Filter_SingleFF0_Config>:

void CAN_Filter_SingleFF0_Config(
	CAN_HandleTypeDef *hcan,
	CAN_FilterTypeDef *can_filter,
	uint32_t addr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	can_filter->FilterActivation = CAN_FILTER_ENABLE;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	621a      	str	r2, [r3, #32]
	can_filter->FilterBank = 0;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
	can_filter->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
	can_filter->FilterIdHigh = addr << 5;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	015a      	lsls	r2, r3, #5
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	601a      	str	r2, [r3, #0]
	can_filter->FilterIdLow = 0x0000;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	605a      	str	r2, [r3, #4]
	can_filter->FilterMaskIdHigh = addr << 5;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	015a      	lsls	r2, r3, #5
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	609a      	str	r2, [r3, #8]
	can_filter->FilterMaskIdLow = 0x0000;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
	can_filter->FilterMode = CAN_FILTERMODE_IDMASK;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
	can_filter->FilterScale = CAN_FILTERSCALE_32BIT;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	61da      	str	r2, [r3, #28]

	HAL_CAN_ConfigFilter(hcan, can_filter);
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f000 ff3c 	bl	8001b52 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000cda:	2102      	movs	r1, #2
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f001 fa35 	bl	800214c <HAL_CAN_ActivateNotification>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <CAN_Transmit>:

HAL_StatusTypeDef CAN_Transmit(CAN_HandleTypeDef *hcan, CAN_TxHandlerTypeDef* tx_handler)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
	if(HAL_CAN_AddTxMessage(hcan, &tx_handler->header, tx_handler->buffer, &Mailbox) != HAL_OK){
 8000cf6:	6839      	ldr	r1, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <CAN_Transmit+0x2c>)
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f001 f834 	bl	8001d6c <HAL_CAN_AddTxMessage>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <CAN_Transmit+0x22>
		return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <CAN_Transmit+0x24>
	}
	return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000

08000d1c <motorStart>:
#include "MOTOR.h"

void motorStart()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d20:	2100      	movs	r1, #0
 8000d22:	480a      	ldr	r0, [pc, #40]	@ (8000d4c <motorStart+0x30>)
 8000d24:	f002 fbbc 	bl	80034a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d28:	210c      	movs	r1, #12
 8000d2a:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <motorStart+0x30>)
 8000d2c:	f002 fbb8 	bl	80034a0 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(R_EN_GPIO_Port, R_EN_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d36:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <motorStart+0x34>)
 8000d38:	f001 fee2 	bl	8002b00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_EN_GPIO_Port, L_EN_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d42:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <motorStart+0x34>)
 8000d44:	f001 fedc 	bl	8002b00 <HAL_GPIO_WritePin>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000e0 	.word	0x200000e0
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <run>:

void run(uint8_t speed, uint8_t v_direction)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	4613      	mov	r3, r2
 8000d62:	71bb      	strb	r3, [r7, #6]
	PWMgen(&htim1,TIM_CHANNEL_4, (v_direction == FORWARD ? speed : 0));
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d105      	bne.n	8000d76 <run+0x22>
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fdaf 	bl	80008d0 <__aeabi_i2f>
 8000d72:	4603      	mov	r3, r0
 8000d74:	e001      	b.n	8000d7a <run+0x26>
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	210c      	movs	r1, #12
 8000d7e:	480b      	ldr	r0, [pc, #44]	@ (8000dac <run+0x58>)
 8000d80:	f000 f816 	bl	8000db0 <PWMgen>
	PWMgen(&htim1,TIM_CHANNEL_1, (v_direction == BACKWARD ? speed : 0));
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d105      	bne.n	8000d96 <run+0x42>
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fd9f 	bl	80008d0 <__aeabi_i2f>
 8000d92:	4603      	mov	r3, r0
 8000d94:	e001      	b.n	8000d9a <run+0x46>
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4803      	ldr	r0, [pc, #12]	@ (8000dac <run+0x58>)
 8000da0:	f000 f806 	bl	8000db0 <PWMgen>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200000e0 	.word	0x200000e0

08000db0 <PWMgen>:

void PWMgen(TIM_HandleTypeDef *htim, uint32_t channel, float duty_cycle)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	float load_value = (duty_cycle / 100) * htim->Instance->ARR;
 8000dbc:	4922      	ldr	r1, [pc, #136]	@ (8000e48 <PWMgen+0x98>)
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fe8e 	bl	8000ae0 <__aeabi_fdiv>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461c      	mov	r4, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fd7a 	bl	80008c8 <__aeabi_ui2f>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f7ff fdcd 	bl	8000978 <__aeabi_fmul>
 8000dde:	4603      	mov	r3, r0
 8000de0:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)load_value);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d108      	bne.n	8000dfa <PWMgen+0x4a>
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ff15 	bl	8000c18 <__aeabi_f2uiz>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000df8:	e022      	b.n	8000e40 <PWMgen+0x90>
	__HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)load_value);
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d109      	bne.n	8000e14 <PWMgen+0x64>
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f7ff ff09 	bl	8000c18 <__aeabi_f2uiz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b299      	uxth	r1, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000e12:	e015      	b.n	8000e40 <PWMgen+0x90>
	__HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)load_value);
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d109      	bne.n	8000e2e <PWMgen+0x7e>
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff fefc 	bl	8000c18 <__aeabi_f2uiz>
 8000e20:	4603      	mov	r3, r0
 8000e22:	b299      	uxth	r1, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000e2c:	e008      	b.n	8000e40 <PWMgen+0x90>
	__HAL_TIM_SET_COMPARE(htim, channel, (uint16_t)load_value);
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff fef2 	bl	8000c18 <__aeabi_f2uiz>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b299      	uxth	r1, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	42c80000 	.word	0x42c80000

08000e4c <servoStart>:

#define NEUTRAL_PULSE 750
#define SCALING_FACTOR 5.56

void servoStart()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e50:	2100      	movs	r1, #0
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <servoStart+0x1c>)
 8000e54:	f002 fb24 	bl	80034a0 <HAL_TIM_PWM_Start>
	setDefaultAngle();
 8000e58:	f000 f834 	bl	8000ec4 <setDefaultAngle>
	HAL_Delay(100);
 8000e5c:	2064      	movs	r0, #100	@ 0x64
 8000e5e:	f000 fd59 	bl	8001914 <HAL_Delay>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000128 	.word	0x20000128
 8000e6c:	00000000 	.word	0x00000000

08000e70 <A2PWM>:

uint16_t A2PWM(int8_t angle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	return (uint16_t)(NEUTRAL_PULSE + angle * SCALING_FACTOR);
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fbe2 	bl	8000648 <__aeabi_i2d>
 8000e84:	a30c      	add	r3, pc, #48	@ (adr r3, 8000eb8 <A2PWM+0x48>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff f961 	bl	8000150 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <A2PWM+0x50>)
 8000e9c:	f7ff fa88 	bl	80003b0 <__adddf3>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fc38 	bl	800071c <__aeabi_d2uiz>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29b      	uxth	r3, r3
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	a3d70a3d 	.word	0xa3d70a3d
 8000ebc:	40163d70 	.word	0x40163d70
 8000ec0:	40877000 	.word	0x40877000

08000ec4 <setDefaultAngle>:

void setDefaultAngle()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, A2PWM(0));
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff ffd1 	bl	8000e70 <A2PWM>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b02      	ldr	r3, [pc, #8]	@ (8000edc <setDefaultAngle+0x18>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000128 	.word	0x20000128

08000ee0 <turn>:

void turn(uint8_t angle, int8_t direction)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, A2PWM(angle * direction));
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffb7 	bl	8000e70 <A2PWM>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <turn+0x34>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000128 	.word	0x20000128

08000f18 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f1e:	4a18      	ldr	r2, [pc, #96]	@ (8000f80 <MX_CAN_Init+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f28:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f36:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000f3a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f3e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000f42:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <MX_CAN_Init+0x64>)
 8000f6a:	f000 fcf7 	bl	800195c <HAL_CAN_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f74:	f000 f9b1 	bl	80012da <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200000b4 	.word	0x200000b4
 8000f80:	40006400 	.word	0x40006400

08000f84 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a29      	ldr	r2, [pc, #164]	@ (8001044 <HAL_CAN_MspInit+0xc0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d14b      	bne.n	800103c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <HAL_CAN_MspInit+0xc4>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	4a27      	ldr	r2, [pc, #156]	@ (8001048 <HAL_CAN_MspInit+0xc4>)
 8000faa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fae:	61d3      	str	r3, [r2, #28]
 8000fb0:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <HAL_CAN_MspInit+0xc4>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <HAL_CAN_MspInit+0xc4>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <HAL_CAN_MspInit+0xc4>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <HAL_CAN_MspInit+0xc4>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4818      	ldr	r0, [pc, #96]	@ (800104c <HAL_CAN_MspInit+0xc8>)
 8000fea:	f001 fc05 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4812      	ldr	r0, [pc, #72]	@ (800104c <HAL_CAN_MspInit+0xc8>)
 8001004:	f001 fbf8 	bl	80027f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_CAN_MspInit+0xcc>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
 800100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001010:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
 8001016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001018:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_CAN_MspInit+0xcc>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2014      	movs	r0, #20
 8001032:	f001 fbaa 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001036:	2014      	movs	r0, #20
 8001038:	f001 fbc3 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	@ 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40006400 	.word	0x40006400
 8001048:	40021000 	.word	0x40021000
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40010000 	.word	0x40010000

08001054 <MX_GPIO_Init>:
        * EXTI
     PA0-WKUP   ------> S_TIM2_CH1_ETR
     PA1   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <MX_GPIO_Init+0xa8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a23      	ldr	r2, [pc, #140]	@ (80010fc <MX_GPIO_Init+0xa8>)
 800106e:	f043 0320 	orr.w	r3, r3, #32
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_GPIO_Init+0xa8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_GPIO_Init+0xa8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a1d      	ldr	r2, [pc, #116]	@ (80010fc <MX_GPIO_Init+0xa8>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_GPIO_Init+0xa8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_GPIO_Init+0xa8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a17      	ldr	r2, [pc, #92]	@ (80010fc <MX_GPIO_Init+0xa8>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_GPIO_Init+0xa8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_EN_Pin|L_EN_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80010b6:	4812      	ldr	r0, [pc, #72]	@ (8001100 <MX_GPIO_Init+0xac>)
 80010b8:	f001 fd22 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010bc:	2303      	movs	r3, #3
 80010be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	@ (8001104 <MX_GPIO_Init+0xb0>)
 80010d0:	f001 fb92 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R_EN_Pin|L_EN_Pin;
 80010d4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_GPIO_Init+0xac>)
 80010ee:	f001 fb83 	bl	80027f8 <HAL_GPIO_Init>

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010c00 	.word	0x40010c00
 8001104:	40010800 	.word	0x40010800

08001108 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 0 */
uint8_t data_received_flag = 0, v_direction = FORWARD;
int8_t h_direction = STRAIGHT;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_handler.header, rx_handler.buffer)){
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	4a0e      	ldr	r2, [pc, #56]	@ (8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001116:	2100      	movs	r1, #0
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fef6 	bl	8001f0a <HAL_CAN_GetRxMessage>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		Error_Handler();
 8001124:	f000 f8d9 	bl	80012da <Error_Handler>
	}
	v_direction = rx_handler.buffer[0];
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001130:	701a      	strb	r2, [r3, #0]
	h_direction = (int8_t)rx_handler.buffer[1];
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	3301      	adds	r3, #1
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b25a      	sxtb	r2, r3
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800113e:	701a      	strb	r2, [r3, #0]
	data_received_flag = 1;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000006c 	.word	0x2000006c
 8001154:	20000024 	.word	0x20000024
 8001158:	200000dd 	.word	0x200000dd
 800115c:	200000dc 	.word	0x200000dc

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f000 fb74 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f872 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f7ff ff72 	bl	8001054 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001170:	f000 f928 	bl	80013c4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001174:	f000 fad0 	bl	8001718 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001178:	f000 f9d0 	bl	800151c <MX_TIM4_Init>
  MX_CAN_Init();
 800117c:	f7ff fecc 	bl	8000f18 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  motorStart();
 8001180:	f7ff fdcc 	bl	8000d1c <motorStart>
  servoStart();
 8001184:	f7ff fe62 	bl	8000e4c <servoStart>
  CAN_Filter_SingleFF0_Config(&hcan, &can_filter, SENSOR_ADDR);
 8001188:	2212      	movs	r2, #18
 800118a:	4927      	ldr	r1, [pc, #156]	@ (8001228 <main+0xc8>)
 800118c:	4827      	ldr	r0, [pc, #156]	@ (800122c <main+0xcc>)
 800118e:	f7ff fd7d 	bl	8000c8c <CAN_Filter_SingleFF0_Config>
  CAN_ComInit_Std(&tx_handler.header, &hcan, ACTUATOR_ADDR, 1);
 8001192:	2301      	movs	r3, #1
 8001194:	22a2      	movs	r2, #162	@ 0xa2
 8001196:	4925      	ldr	r1, [pc, #148]	@ (800122c <main+0xcc>)
 8001198:	4825      	ldr	r0, [pc, #148]	@ (8001230 <main+0xd0>)
 800119a:	f7ff fd5d 	bl	8000c58 <CAN_ComInit_Std>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	run(30, FORWARD);
 800119e:	2101      	movs	r1, #1
 80011a0:	201e      	movs	r0, #30
 80011a2:	f7ff fdd7 	bl	8000d54 <run>

	while (1)
	{
		if(!data_received_flag) {
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <main+0xd4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d039      	beq.n	8001222 <main+0xc2>
			continue;
		}

		switch(v_direction){
 80011ae:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <main+0xd8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d01b      	beq.n	80011ee <main+0x8e>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d11d      	bne.n	80011f6 <main+0x96>
			case FORWARD:
				switch(h_direction){
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <main+0xdc>)
 80011bc:	f993 3000 	ldrsb.w	r3, [r3]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d00b      	beq.n	80011dc <main+0x7c>
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	dc11      	bgt.n	80011ec <main+0x8c>
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d002      	beq.n	80011d4 <main+0x74>
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d008      	beq.n	80011e4 <main+0x84>
						break;
					case STRAIGHT:
						tx_handler.buffer = forward_buffer;
						break;
					default:
						break;
 80011d2:	e00b      	b.n	80011ec <main+0x8c>
						tx_handler.buffer = left_buffer;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <main+0xd0>)
 80011d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001240 <main+0xe0>)
 80011d8:	619a      	str	r2, [r3, #24]
						break;
 80011da:	e008      	b.n	80011ee <main+0x8e>
						tx_handler.buffer = right_buffer;
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <main+0xd0>)
 80011de:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <main+0xe4>)
 80011e0:	619a      	str	r2, [r3, #24]
						break;
 80011e2:	e004      	b.n	80011ee <main+0x8e>
						tx_handler.buffer = forward_buffer;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <main+0xd0>)
 80011e6:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <main+0xe8>)
 80011e8:	619a      	str	r2, [r3, #24]
						break;
 80011ea:	e000      	b.n	80011ee <main+0x8e>
						break;
 80011ec:	bf00      	nop
				}
			case BACKWARD:
				tx_handler.buffer = backward_buffer;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <main+0xd0>)
 80011f0:	4a16      	ldr	r2, [pc, #88]	@ (800124c <main+0xec>)
 80011f2:	619a      	str	r2, [r3, #24]
				break;
 80011f4:	e000      	b.n	80011f8 <main+0x98>
			default:
				break;
 80011f6:	bf00      	nop
		}
		run(30, v_direction);
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <main+0xd8>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	201e      	movs	r0, #30
 8001200:	f7ff fda8 	bl	8000d54 <run>
		turn(40, h_direction);
 8001204:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <main+0xdc>)
 8001206:	f993 3000 	ldrsb.w	r3, [r3]
 800120a:	4619      	mov	r1, r3
 800120c:	2028      	movs	r0, #40	@ 0x28
 800120e:	f7ff fe67 	bl	8000ee0 <turn>
		CAN_Transmit(&hcan, &tx_handler);
 8001212:	4907      	ldr	r1, [pc, #28]	@ (8001230 <main+0xd0>)
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <main+0xcc>)
 8001216:	f7ff fd69 	bl	8000cec <CAN_Transmit>

		data_received_flag = 0;
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <main+0xd4>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	e7c1      	b.n	80011a6 <main+0x46>
			continue;
 8001222:	bf00      	nop
		if(!data_received_flag) {
 8001224:	e7bf      	b.n	80011a6 <main+0x46>
 8001226:	bf00      	nop
 8001228:	2000008c 	.word	0x2000008c
 800122c:	200000b4 	.word	0x200000b4
 8001230:	20000050 	.word	0x20000050
 8001234:	200000dc 	.word	0x200000dc
 8001238:	20000024 	.word	0x20000024
 800123c:	200000dd 	.word	0x200000dd
 8001240:	20000004 	.word	0x20000004
 8001244:	2000000c 	.word	0x2000000c
 8001248:	20000014 	.word	0x20000014
 800124c:	2000001c 	.word	0x2000001c

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b090      	sub	sp, #64	@ 0x40
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	2228      	movs	r2, #40	@ 0x28
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f002 ff88 	bl	8004174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800128e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fc49 	bl	8002b30 <HAL_RCC_OscConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012a4:	f000 f819 	bl	80012da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a8:	230f      	movs	r3, #15
 80012aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2102      	movs	r1, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 feb6 	bl	8003034 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ce:	f000 f804 	bl	80012da <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3740      	adds	r7, #64	@ 0x40
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012de:	b672      	cpsid	i
}
 80012e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e2:	bf00      	nop
 80012e4:	e7fd      	b.n	80012e2 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <HAL_MspInit+0x5c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_MspInit+0x5c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <HAL_MspInit+0x5c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_MspInit+0x60>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <HAL_MspInit+0x60>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 fa9e 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013aa:	f000 fef4 	bl	8002196 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000b4 	.word	0x200000b4

080013b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b096      	sub	sp, #88	@ 0x58
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2220      	movs	r2, #32
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 feb9 	bl	8004174 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001402:	4b44      	ldr	r3, [pc, #272]	@ (8001514 <MX_TIM1_Init+0x150>)
 8001404:	4a44      	ldr	r2, [pc, #272]	@ (8001518 <MX_TIM1_Init+0x154>)
 8001406:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001408:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <MX_TIM1_Init+0x150>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b41      	ldr	r3, [pc, #260]	@ (8001514 <MX_TIM1_Init+0x150>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001414:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <MX_TIM1_Init+0x150>)
 8001416:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800141a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b3d      	ldr	r3, [pc, #244]	@ (8001514 <MX_TIM1_Init+0x150>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001422:	4b3c      	ldr	r3, [pc, #240]	@ (8001514 <MX_TIM1_Init+0x150>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <MX_TIM1_Init+0x150>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800142e:	4839      	ldr	r0, [pc, #228]	@ (8001514 <MX_TIM1_Init+0x150>)
 8001430:	f001 ff8e 	bl	8003350 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800143a:	f7ff ff4e 	bl	80012da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001442:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001448:	4619      	mov	r1, r3
 800144a:	4832      	ldr	r0, [pc, #200]	@ (8001514 <MX_TIM1_Init+0x150>)
 800144c:	f002 f98c 	bl	8003768 <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001456:	f7ff ff40 	bl	80012da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800145a:	482e      	ldr	r0, [pc, #184]	@ (8001514 <MX_TIM1_Init+0x150>)
 800145c:	f001 ffc7 	bl	80033ee <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001466:	f7ff ff38 	bl	80012da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001472:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001476:	4619      	mov	r1, r3
 8001478:	4826      	ldr	r0, [pc, #152]	@ (8001514 <MX_TIM1_Init+0x150>)
 800147a:	f002 fced 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001484:	f7ff ff29 	bl	80012da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	@ 0x60
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4819      	ldr	r0, [pc, #100]	@ (8001514 <MX_TIM1_Init+0x150>)
 80014ae:	f002 f899 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014b8:	f7ff ff0f 	bl	80012da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c0:	220c      	movs	r2, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	4813      	ldr	r0, [pc, #76]	@ (8001514 <MX_TIM1_Init+0x150>)
 80014c6:	f002 f88d 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014d0:	f7ff ff03 	bl	80012da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4807      	ldr	r0, [pc, #28]	@ (8001514 <MX_TIM1_Init+0x150>)
 80014f8:	f002 fd0c 	bl	8003f14 <HAL_TIMEx_ConfigBreakDeadTime>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001502:	f7ff feea 	bl	80012da <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001506:	4803      	ldr	r0, [pc, #12]	@ (8001514 <MX_TIM1_Init+0x150>)
 8001508:	f000 f8b0 	bl	800166c <HAL_TIM_MspPostInit>

}
 800150c:	bf00      	nop
 800150e:	3758      	adds	r7, #88	@ 0x58
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200000e0 	.word	0x200000e0
 8001518:	40012c00 	.word	0x40012c00

0800151c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	@ 0x38
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800154c:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <MX_TIM4_Init+0xe4>)
 800154e:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <MX_TIM4_Init+0xe8>)
 8001550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 143;
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_TIM4_Init+0xe4>)
 8001554:	228f      	movs	r2, #143	@ 0x8f
 8001556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <MX_TIM4_Init+0xe4>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800155e:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <MX_TIM4_Init+0xe4>)
 8001560:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <MX_TIM4_Init+0xe4>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <MX_TIM4_Init+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001572:	4823      	ldr	r0, [pc, #140]	@ (8001600 <MX_TIM4_Init+0xe4>)
 8001574:	f001 feec 	bl	8003350 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800157e:	f7ff feac 	bl	80012da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158c:	4619      	mov	r1, r3
 800158e:	481c      	ldr	r0, [pc, #112]	@ (8001600 <MX_TIM4_Init+0xe4>)
 8001590:	f002 f8ea 	bl	8003768 <HAL_TIM_ConfigClockSource>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800159a:	f7ff fe9e 	bl	80012da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800159e:	4818      	ldr	r0, [pc, #96]	@ (8001600 <MX_TIM4_Init+0xe4>)
 80015a0:	f001 ff25 	bl	80033ee <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80015aa:	f7ff fe96 	bl	80012da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4619      	mov	r1, r3
 80015bc:	4810      	ldr	r0, [pc, #64]	@ (8001600 <MX_TIM4_Init+0xe4>)
 80015be:	f002 fc4b 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015c8:	f7ff fe87 	bl	80012da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	@ 0x60
 80015ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	@ (8001600 <MX_TIM4_Init+0xe4>)
 80015e4:	f001 fffe 	bl	80035e4 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80015ee:	f7ff fe74 	bl	80012da <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015f2:	4803      	ldr	r0, [pc, #12]	@ (8001600 <MX_TIM4_Init+0xe4>)
 80015f4:	f000 f83a 	bl	800166c <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	@ 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000128 	.word	0x20000128
 8001604:	40000800 	.word	0x40000800

08001608 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <HAL_TIM_Base_MspInit+0x58>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10c      	bne.n	8001634 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_TIM_Base_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_TIM_Base_MspInit+0x5c>)
 8001620:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_TIM_Base_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001632:	e010      	b.n	8001656 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <HAL_TIM_Base_MspInit+0x60>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d10b      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_TIM_Base_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_TIM_Base_MspInit+0x5c>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_TIM_Base_MspInit+0x5c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40000800 	.word	0x40000800

0800166c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <HAL_TIM_MspPostInit+0x98>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d119      	bne.n	80016c0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_TIM_MspPostInit+0x9c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_TIM_MspPostInit+0x9c>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_TIM_MspPostInit+0x9c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80016a4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80016a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	4814      	ldr	r0, [pc, #80]	@ (800170c <HAL_TIM_MspPostInit+0xa0>)
 80016ba:	f001 f89d 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016be:	e01c      	b.n	80016fa <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM4)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <HAL_TIM_MspPostInit+0xa4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d117      	bne.n	80016fa <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_TIM_MspPostInit+0x9c>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <HAL_TIM_MspPostInit+0x9c>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <HAL_TIM_MspPostInit+0x9c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e2:	2340      	movs	r3, #64	@ 0x40
 80016e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	4807      	ldr	r0, [pc, #28]	@ (8001714 <HAL_TIM_MspPostInit+0xa8>)
 80016f6:	f001 f87f 	bl	80027f8 <HAL_GPIO_Init>
}
 80016fa:	bf00      	nop
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40012c00 	.word	0x40012c00
 8001708:	40021000 	.word	0x40021000
 800170c:	40010800 	.word	0x40010800
 8001710:	40000800 	.word	0x40000800
 8001714:	40010c00 	.word	0x40010c00

08001718 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 800171e:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <MX_USART1_UART_Init+0x50>)
 8001720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_USART1_UART_Init+0x4c>)
 8001750:	f002 fc31 	bl	8003fb6 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f7ff fdbe 	bl	80012da <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000170 	.word	0x20000170
 8001768:	40013800 	.word	0x40013800

0800176c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <HAL_UART_MspInit+0x8c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d131      	bne.n	80017f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_UART_MspInit+0x90>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a1a      	ldr	r2, [pc, #104]	@ (80017fc <HAL_UART_MspInit+0x90>)
 8001792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_UART_MspInit+0x90>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_UART_MspInit+0x90>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <HAL_UART_MspInit+0x90>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_UART_MspInit+0x90>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	480b      	ldr	r0, [pc, #44]	@ (8001800 <HAL_UART_MspInit+0x94>)
 80017d2:	f001 f811 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <HAL_UART_MspInit+0x94>)
 80017ec:	f001 f804 	bl	80027f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010800 	.word	0x40010800

08001804 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001804:	f7ff fdd8 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800180a:	490c      	ldr	r1, [pc, #48]	@ (800183c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800180c:	4a0c      	ldr	r2, [pc, #48]	@ (8001840 <LoopFillZerobss+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a09      	ldr	r2, [pc, #36]	@ (8001844 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001820:	4c09      	ldr	r4, [pc, #36]	@ (8001848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182e:	f002 fca9 	bl	8004184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001832:	f7ff fc95 	bl	8001160 <main>
  bx lr
 8001836:	4770      	bx	lr
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001840:	08004218 	.word	0x08004218
  ldr r2, =_sbss
 8001844:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001848:	200001bc 	.word	0x200001bc

0800184c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC1_2_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_Init+0x28>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_Init+0x28>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 ff87 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	200f      	movs	r0, #15
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fd3c 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 ff9f 	bl	80027de <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 ff67 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000028 	.word	0x20000028
 80018d4:	20000030 	.word	0x20000030
 80018d8:	2000002c 	.word	0x2000002c

080018dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_IncTick+0x1c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_IncTick+0x20>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a03      	ldr	r2, [pc, #12]	@ (80018fc <HAL_IncTick+0x20>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	20000030 	.word	0x20000030
 80018fc:	200001b8 	.word	0x200001b8

08001900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b02      	ldr	r3, [pc, #8]	@ (8001910 <HAL_GetTick+0x10>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	200001b8 	.word	0x200001b8

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff fff0 	bl	8001900 <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffe0 	bl	8001900 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000030 	.word	0x20000030

0800195c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0ed      	b.n	8001b4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fb02 	bl	8000f84 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001990:	f7ff ffb6 	bl	8001900 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001996:	e012      	b.n	80019be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001998:	f7ff ffb2 	bl	8001900 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b0a      	cmp	r3, #10
 80019a4:	d90b      	bls.n	80019be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2205      	movs	r2, #5
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0c5      	b.n	8001b4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0e5      	beq.n	8001998 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0202 	bic.w	r2, r2, #2
 80019da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019dc:	f7ff ff90 	bl	8001900 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019e2:	e012      	b.n	8001a0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019e4:	f7ff ff8c 	bl	8001900 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b0a      	cmp	r3, #10
 80019f0:	d90b      	bls.n	8001a0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2205      	movs	r2, #5
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e09f      	b.n	8001b4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e5      	bne.n	80019e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7e1b      	ldrb	r3, [r3, #24]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e007      	b.n	8001a42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7e5b      	ldrb	r3, [r3, #25]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d108      	bne.n	8001a5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7e9b      	ldrb	r3, [r3, #26]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d108      	bne.n	8001a86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0220 	bic.w	r2, r2, #32
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7edb      	ldrb	r3, [r3, #27]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0210 	bic.w	r2, r2, #16
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0210 	orr.w	r2, r2, #16
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7f1b      	ldrb	r3, [r3, #28]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d108      	bne.n	8001ada <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0208 	orr.w	r2, r2, #8
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0208 	bic.w	r2, r2, #8
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7f5b      	ldrb	r3, [r3, #29]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0204 	orr.w	r2, r2, #4
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e007      	b.n	8001b14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0204 	bic.w	r2, r2, #4
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	ea42 0103 	orr.w	r1, r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b087      	sub	sp, #28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b68:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b6a:	7cfb      	ldrb	r3, [r7, #19]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d003      	beq.n	8001b78 <HAL_CAN_ConfigFilter+0x26>
 8001b70:	7cfb      	ldrb	r3, [r7, #19]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	f040 80aa 	bne.w	8001ccc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2201      	movs	r2, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d123      	bne.n	8001bfa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3248      	adds	r2, #72	@ 0x48
 8001bda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bf0:	6979      	ldr	r1, [r7, #20]
 8001bf2:	3348      	adds	r3, #72	@ 0x48
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d122      	bne.n	8001c48 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3248      	adds	r2, #72	@ 0x48
 8001c28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c3e:	6979      	ldr	r1, [r7, #20]
 8001c40:	3348      	adds	r3, #72	@ 0x48
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001c62:	e007      	b.n	8001c74 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c8e:	e007      	b.n	8001ca0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cbe:	f023 0201 	bic.w	r2, r3, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	e006      	b.n	8001cda <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d12e      	bne.n	8001d56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d10:	f7ff fdf6 	bl	8001900 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d16:	e012      	b.n	8001d3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d18:	f7ff fdf2 	bl	8001900 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b0a      	cmp	r3, #10
 8001d24:	d90b      	bls.n	8001d3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2205      	movs	r2, #5
 8001d36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e012      	b.n	8001d64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e5      	bne.n	8001d18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e006      	b.n	8001d64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
  }
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d003      	beq.n	8001d98 <HAL_CAN_AddTxMessage+0x2c>
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	f040 80ad 	bne.w	8001ef2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10a      	bne.n	8001db8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8095 	beq.w	8001ee2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	0e1b      	lsrs	r3, r3, #24
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	6809      	ldr	r1, [r1, #0]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3318      	adds	r3, #24
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	440b      	add	r3, r1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e00f      	b.n	8001e10 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dfa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e04:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3318      	adds	r3, #24
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	440b      	add	r3, r1
 8001e0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3318      	adds	r3, #24
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	440b      	add	r3, r1
 8001e20:	3304      	adds	r3, #4
 8001e22:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	7d1b      	ldrb	r3, [r3, #20]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d111      	bne.n	8001e50 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3318      	adds	r3, #24
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	6811      	ldr	r1, [r2, #0]
 8001e40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3318      	adds	r3, #24
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3307      	adds	r3, #7
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	061a      	lsls	r2, r3, #24
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3306      	adds	r3, #6
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	041b      	lsls	r3, r3, #16
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3305      	adds	r3, #5
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	3204      	adds	r2, #4
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	4610      	mov	r0, r2
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	6811      	ldr	r1, [r2, #0]
 8001e78:	ea43 0200 	orr.w	r2, r3, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	440b      	add	r3, r1
 8001e82:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3303      	adds	r3, #3
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	061a      	lsls	r2, r3, #24
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3302      	adds	r3, #2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6811      	ldr	r1, [r2, #0]
 8001eae:	ea43 0200 	orr.w	r2, r3, r0
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001ebc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	6811      	ldr	r1, [r2, #0]
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3318      	adds	r3, #24
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	440b      	add	r3, r1
 8001edc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e00e      	b.n	8001f00 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e006      	b.n	8001f00 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
  }
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3724      	adds	r7, #36	@ 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b087      	sub	sp, #28
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d003      	beq.n	8001f2e <HAL_CAN_GetRxMessage+0x24>
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	f040 8103 	bne.w	8002134 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10e      	bne.n	8001f52 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d116      	bne.n	8001f70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0f7      	b.n	8002142 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0e8      	b.n	8002142 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	331b      	adds	r3, #27
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0204 	and.w	r2, r3, #4
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	331b      	adds	r3, #27
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	4413      	add	r3, r2
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	331b      	adds	r3, #27
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	331b      	adds	r3, #27
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4413      	add	r3, r2
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0202 	and.w	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	331b      	adds	r3, #27
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	e00b      	b.n	800200e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	331b      	adds	r3, #27
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 020f 	and.w	r2, r3, #15
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	331b      	adds	r3, #27
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	b2da      	uxtb	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	331b      	adds	r3, #27
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	b29a      	uxth	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	4413      	add	r3, r2
 8002048:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0a1a      	lsrs	r2, r3, #8
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4413      	add	r3, r2
 8002078:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0c1a      	lsrs	r2, r3, #16
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3302      	adds	r3, #2
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4413      	add	r3, r2
 8002092:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0e1a      	lsrs	r2, r3, #24
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3303      	adds	r3, #3
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3304      	adds	r3, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0a1a      	lsrs	r2, r3, #8
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3305      	adds	r3, #5
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0c1a      	lsrs	r2, r3, #16
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3306      	adds	r3, #6
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e1a      	lsrs	r2, r3, #24
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3307      	adds	r3, #7
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d108      	bne.n	8002120 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0220 	orr.w	r2, r2, #32
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	e007      	b.n	8002130 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	e006      	b.n	8002142 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d002      	beq.n	800216a <HAL_CAN_ActivateNotification+0x1e>
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d109      	bne.n	800217e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6959      	ldr	r1, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e006      	b.n	800218c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
  }
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b08a      	sub	sp, #40	@ 0x28
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d07c      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d023      	beq.n	800222e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f983 	bl	8002504 <HAL_CAN_TxMailbox0CompleteCallback>
 80021fe:	e016      	b.n	800222e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
 8002212:	e00c      	b.n	800222e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
 8002226:	e002      	b.n	800222e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f986 	bl	800253a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d024      	beq.n	8002282 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002240:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f962 	bl	8002516 <HAL_CAN_TxMailbox1CompleteCallback>
 8002252:	e016      	b.n	8002282 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	e00c      	b.n	8002282 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
 800227a:	e002      	b.n	8002282 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f965 	bl	800254c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d024      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002294:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f941 	bl	8002528 <HAL_CAN_TxMailbox2CompleteCallback>
 80022a6:	e016      	b.n	80022d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ba:	e00c      	b.n	80022d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ce:	e002      	b.n	80022d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f944 	bl	800255e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00c      	beq.n	80022fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2210      	movs	r2, #16
 80022f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2208      	movs	r2, #8
 8002314:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f92a 	bl	8002570 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe fee7 	bl	8001108 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00c      	beq.n	800235e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2210      	movs	r2, #16
 800235c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2208      	movs	r2, #8
 8002378:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f90a 	bl	8002594 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8f2 	bl	8002582 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00b      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2210      	movs	r2, #16
 80023b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8f3 	bl	80025a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2208      	movs	r2, #8
 80023da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f8eb 	bl	80025b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d07b      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d072      	beq.n	80024dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	d043      	beq.n	80024dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800245a:	2b00      	cmp	r3, #0
 800245c:	d03e      	beq.n	80024dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002464:	2b60      	cmp	r3, #96	@ 0x60
 8002466:	d02b      	beq.n	80024c0 <HAL_CAN_IRQHandler+0x32a>
 8002468:	2b60      	cmp	r3, #96	@ 0x60
 800246a:	d82e      	bhi.n	80024ca <HAL_CAN_IRQHandler+0x334>
 800246c:	2b50      	cmp	r3, #80	@ 0x50
 800246e:	d022      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x320>
 8002470:	2b50      	cmp	r3, #80	@ 0x50
 8002472:	d82a      	bhi.n	80024ca <HAL_CAN_IRQHandler+0x334>
 8002474:	2b40      	cmp	r3, #64	@ 0x40
 8002476:	d019      	beq.n	80024ac <HAL_CAN_IRQHandler+0x316>
 8002478:	2b40      	cmp	r3, #64	@ 0x40
 800247a:	d826      	bhi.n	80024ca <HAL_CAN_IRQHandler+0x334>
 800247c:	2b30      	cmp	r3, #48	@ 0x30
 800247e:	d010      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x30c>
 8002480:	2b30      	cmp	r3, #48	@ 0x30
 8002482:	d822      	bhi.n	80024ca <HAL_CAN_IRQHandler+0x334>
 8002484:	2b10      	cmp	r3, #16
 8002486:	d002      	beq.n	800248e <HAL_CAN_IRQHandler+0x2f8>
 8002488:	2b20      	cmp	r3, #32
 800248a:	d005      	beq.n	8002498 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800248c:	e01d      	b.n	80024ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002496:	e019      	b.n	80024cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	f043 0310 	orr.w	r3, r3, #16
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024a0:	e014      	b.n	80024cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	f043 0320 	orr.w	r3, r3, #32
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024aa:	e00f      	b.n	80024cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024b4:	e00a      	b.n	80024cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024be:	e005      	b.n	80024cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024c8:	e000      	b.n	80024cc <HAL_CAN_IRQHandler+0x336>
            break;
 80024ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80024da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2204      	movs	r2, #4
 80024e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f867 	bl	80025ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	@ 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4906      	ldr	r1, [pc, #24]	@ (8002674 <__NVIC_EnableIRQ+0x34>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	@ (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	@ (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	@ 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f7ff ff90 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff2d 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff42 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff90 	bl	80026cc <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5f 	bl	8002678 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff35 	bl	8002640 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b08b      	sub	sp, #44	@ 0x2c
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280a:	e169      	b.n	8002ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800280c:	2201      	movs	r2, #1
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 8158 	bne.w	8002ada <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a9a      	ldr	r2, [pc, #616]	@ (8002a98 <HAL_GPIO_Init+0x2a0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d05e      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002834:	4a98      	ldr	r2, [pc, #608]	@ (8002a98 <HAL_GPIO_Init+0x2a0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d875      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800283a:	4a98      	ldr	r2, [pc, #608]	@ (8002a9c <HAL_GPIO_Init+0x2a4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d058      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002840:	4a96      	ldr	r2, [pc, #600]	@ (8002a9c <HAL_GPIO_Init+0x2a4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d86f      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002846:	4a96      	ldr	r2, [pc, #600]	@ (8002aa0 <HAL_GPIO_Init+0x2a8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d052      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 800284c:	4a94      	ldr	r2, [pc, #592]	@ (8002aa0 <HAL_GPIO_Init+0x2a8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d869      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002852:	4a94      	ldr	r2, [pc, #592]	@ (8002aa4 <HAL_GPIO_Init+0x2ac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04c      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002858:	4a92      	ldr	r2, [pc, #584]	@ (8002aa4 <HAL_GPIO_Init+0x2ac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d863      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800285e:	4a92      	ldr	r2, [pc, #584]	@ (8002aa8 <HAL_GPIO_Init+0x2b0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d046      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002864:	4a90      	ldr	r2, [pc, #576]	@ (8002aa8 <HAL_GPIO_Init+0x2b0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d85d      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800286a:	2b12      	cmp	r3, #18
 800286c:	d82a      	bhi.n	80028c4 <HAL_GPIO_Init+0xcc>
 800286e:	2b12      	cmp	r3, #18
 8002870:	d859      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002872:	a201      	add	r2, pc, #4	@ (adr r2, 8002878 <HAL_GPIO_Init+0x80>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	080028f3 	.word	0x080028f3
 800287c:	080028cd 	.word	0x080028cd
 8002880:	080028df 	.word	0x080028df
 8002884:	08002921 	.word	0x08002921
 8002888:	08002927 	.word	0x08002927
 800288c:	08002927 	.word	0x08002927
 8002890:	08002927 	.word	0x08002927
 8002894:	08002927 	.word	0x08002927
 8002898:	08002927 	.word	0x08002927
 800289c:	08002927 	.word	0x08002927
 80028a0:	08002927 	.word	0x08002927
 80028a4:	08002927 	.word	0x08002927
 80028a8:	08002927 	.word	0x08002927
 80028ac:	08002927 	.word	0x08002927
 80028b0:	08002927 	.word	0x08002927
 80028b4:	08002927 	.word	0x08002927
 80028b8:	08002927 	.word	0x08002927
 80028bc:	080028d5 	.word	0x080028d5
 80028c0:	080028e9 	.word	0x080028e9
 80028c4:	4a79      	ldr	r2, [pc, #484]	@ (8002aac <HAL_GPIO_Init+0x2b4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ca:	e02c      	b.n	8002926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	623b      	str	r3, [r7, #32]
          break;
 80028d2:	e029      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	3304      	adds	r3, #4
 80028da:	623b      	str	r3, [r7, #32]
          break;
 80028dc:	e024      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	3308      	adds	r3, #8
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e01f      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	330c      	adds	r3, #12
 80028ee:	623b      	str	r3, [r7, #32]
          break;
 80028f0:	e01a      	b.n	8002928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028fa:	2304      	movs	r3, #4
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e013      	b.n	8002928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002908:	2308      	movs	r3, #8
 800290a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	611a      	str	r2, [r3, #16]
          break;
 8002912:	e009      	b.n	8002928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002914:	2308      	movs	r3, #8
 8002916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	615a      	str	r2, [r3, #20]
          break;
 800291e:	e003      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002920:	2300      	movs	r3, #0
 8002922:	623b      	str	r3, [r7, #32]
          break;
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x130>
          break;
 8002926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2bff      	cmp	r3, #255	@ 0xff
 800292c:	d801      	bhi.n	8002932 <HAL_GPIO_Init+0x13a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	e001      	b.n	8002936 <HAL_GPIO_Init+0x13e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2bff      	cmp	r3, #255	@ 0xff
 800293c:	d802      	bhi.n	8002944 <HAL_GPIO_Init+0x14c>
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0x152>
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	3b08      	subs	r3, #8
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	210f      	movs	r1, #15
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	401a      	ands	r2, r3
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80b1 	beq.w	8002ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002978:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab0 <HAL_GPIO_Init+0x2b8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ab0 <HAL_GPIO_Init+0x2b8>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab0 <HAL_GPIO_Init+0x2b8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002990:	4a48      	ldr	r2, [pc, #288]	@ (8002ab4 <HAL_GPIO_Init+0x2bc>)
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a40      	ldr	r2, [pc, #256]	@ (8002ab8 <HAL_GPIO_Init+0x2c0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x1ec>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3f      	ldr	r2, [pc, #252]	@ (8002abc <HAL_GPIO_Init+0x2c4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1e8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ac0 <HAL_GPIO_Init+0x2c8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3d      	ldr	r2, [pc, #244]	@ (8002ac4 <HAL_GPIO_Init+0x2cc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1e0>
 80029d4:	2303      	movs	r3, #3
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029d8:	2304      	movs	r3, #4
 80029da:	e004      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029dc:	2302      	movs	r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029e4:	2300      	movs	r3, #0
 80029e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e8:	f002 0203 	and.w	r2, r2, #3
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	4093      	lsls	r3, r2
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029f6:	492f      	ldr	r1, [pc, #188]	@ (8002ab4 <HAL_GPIO_Init+0x2bc>)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a10:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	492c      	ldr	r1, [pc, #176]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4928      	ldr	r1, [pc, #160]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a38:	4b23      	ldr	r3, [pc, #140]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	4922      	ldr	r1, [pc, #136]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a46:	4b20      	ldr	r3, [pc, #128]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	491e      	ldr	r1, [pc, #120]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a60:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4918      	ldr	r1, [pc, #96]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
 8002a6c:	e006      	b.n	8002a7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	4914      	ldr	r1, [pc, #80]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d021      	beq.n	8002acc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	490e      	ldr	r1, [pc, #56]	@ (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e021      	b.n	8002ada <HAL_GPIO_Init+0x2e2>
 8002a96:	bf00      	nop
 8002a98:	10320000 	.word	0x10320000
 8002a9c:	10310000 	.word	0x10310000
 8002aa0:	10220000 	.word	0x10220000
 8002aa4:	10210000 	.word	0x10210000
 8002aa8:	10120000 	.word	0x10120000
 8002aac:	10110000 	.word	0x10110000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40010800 	.word	0x40010800
 8002abc:	40010c00 	.word	0x40010c00
 8002ac0:	40011000 	.word	0x40011000
 8002ac4:	40011400 	.word	0x40011400
 8002ac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_GPIO_Init+0x304>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	4909      	ldr	r1, [pc, #36]	@ (8002afc <HAL_GPIO_Init+0x304>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	3301      	adds	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f47f ae8e 	bne.w	800280c <HAL_GPIO_Init+0x14>
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	372c      	adds	r7, #44	@ 0x2c
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40010400 	.word	0x40010400

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e272      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8087 	beq.w	8002c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b50:	4b92      	ldr	r3, [pc, #584]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d00c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b5c:	4b8f      	ldr	r3, [pc, #572]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d112      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
 8002b68:	4b8c      	ldr	r3, [pc, #560]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b74:	d10b      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b76:	4b89      	ldr	r3, [pc, #548]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d06c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x12c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d168      	bne.n	8002c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e24c      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x76>
 8002b98:	4b80      	ldr	r3, [pc, #512]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a7f      	ldr	r2, [pc, #508]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e02e      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x98>
 8002bae:	4b7b      	ldr	r3, [pc, #492]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a7a      	ldr	r2, [pc, #488]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b78      	ldr	r3, [pc, #480]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a77      	ldr	r2, [pc, #476]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0xbc>
 8002bd2:	4b72      	ldr	r3, [pc, #456]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a71      	ldr	r2, [pc, #452]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b6f      	ldr	r3, [pc, #444]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002bec:	4b6b      	ldr	r3, [pc, #428]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b68      	ldr	r3, [pc, #416]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a67      	ldr	r2, [pc, #412]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fe78 	bl	8001900 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fe74 	bl	8001900 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e200      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b5d      	ldr	r3, [pc, #372]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe4>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fe64 	bl	8001900 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fe60 	bl	8001900 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	@ 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1ec      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b53      	ldr	r3, [pc, #332]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x10c>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d063      	beq.n	8002d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c76:	4b49      	ldr	r3, [pc, #292]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x18c>
 8002c82:	4b46      	ldr	r3, [pc, #280]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	4b43      	ldr	r3, [pc, #268]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x176>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1c0      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4939      	ldr	r1, [pc, #228]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fe19 	bl	8001900 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fe15 	bl	8001900 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1a1      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4927      	ldr	r1, [pc, #156]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d06:	4b26      	ldr	r3, [pc, #152]	@ (8002da0 <HAL_RCC_OscConfig+0x270>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fdf8 	bl	8001900 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe fdf4 	bl	8001900 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e180      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	4b1d      	ldr	r3, [pc, #116]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03a      	beq.n	8002db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <HAL_RCC_OscConfig+0x274>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fdd8 	bl	8001900 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fdd4 	bl	8001900 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e160      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f000 face 	bl	8003314 <RCC_Delay>
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe fdbe 	bl	8001900 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d86:	e00f      	b.n	8002da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe fdba 	bl	8001900 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d908      	bls.n	8002da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e146      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	42420000 	.word	0x42420000
 8002da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b92      	ldr	r3, [pc, #584]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e9      	bne.n	8002d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a6 	beq.w	8002f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b88      	ldr	r3, [pc, #544]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a87      	ldr	r2, [pc, #540]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	61d3      	str	r3, [r2, #28]
 8002dde:	4b85      	ldr	r3, [pc, #532]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b82      	ldr	r3, [pc, #520]	@ (8002ff8 <HAL_RCC_OscConfig+0x4c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff8 <HAL_RCC_OscConfig+0x4c8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8002ff8 <HAL_RCC_OscConfig+0x4c8>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fd7b 	bl	8001900 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe fd77 	bl	8001900 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	@ 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e103      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b75      	ldr	r3, [pc, #468]	@ (8002ff8 <HAL_RCC_OscConfig+0x4c8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x312>
 8002e34:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6213      	str	r3, [r2, #32]
 8002e40:	e02d      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x334>
 8002e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a69      	ldr	r2, [pc, #420]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	4b67      	ldr	r3, [pc, #412]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a66      	ldr	r2, [pc, #408]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6213      	str	r3, [r2, #32]
 8002e62:	e01c      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x356>
 8002e6c:	4b61      	ldr	r3, [pc, #388]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4a60      	ldr	r2, [pc, #384]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6213      	str	r3, [r2, #32]
 8002e78:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e00b      	b.n	8002e9e <HAL_RCC_OscConfig+0x36e>
 8002e86:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6213      	str	r3, [r2, #32]
 8002e92:	4b58      	ldr	r3, [pc, #352]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	4a57      	ldr	r2, [pc, #348]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d015      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fd2b 	bl	8001900 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fd27 	bl	8001900 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0b1      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ee      	beq.n	8002eae <HAL_RCC_OscConfig+0x37e>
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fd15 	bl	8001900 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe fd11 	bl	8001900 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e09b      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	4b40      	ldr	r3, [pc, #256]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8087 	beq.w	8003026 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4b36      	ldr	r3, [pc, #216]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d061      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d146      	bne.n	8002fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b33      	ldr	r3, [pc, #204]	@ (8002ffc <HAL_RCC_OscConfig+0x4cc>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe fce5 	bl	8001900 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe fce1 	bl	8001900 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e06d      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4c:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f62:	4b24      	ldr	r3, [pc, #144]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	4921      	ldr	r1, [pc, #132]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f74:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a19      	ldr	r1, [r3, #32]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	430b      	orrs	r3, r1
 8002f86:	491b      	ldr	r1, [pc, #108]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <HAL_RCC_OscConfig+0x4cc>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe fcb5 	bl	8001900 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe fcb1 	bl	8001900 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e03d      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x46a>
 8002fb8:	e035      	b.n	8003026 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <HAL_RCC_OscConfig+0x4cc>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fc9e 	bl	8001900 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fc9a 	bl	8001900 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e026      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x498>
 8002fe6:	e01e      	b.n	8003026 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e019      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_RCC_OscConfig+0x500>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	429a      	cmp	r2, r3
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	429a      	cmp	r2, r3
 8003020:	d001      	beq.n	8003026 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40021000 	.word	0x40021000

08003034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d0      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b6a      	ldr	r3, [pc, #424]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b67      	ldr	r3, [pc, #412]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4965      	ldr	r1, [pc, #404]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a58      	ldr	r2, [pc, #352]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800309a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a52      	ldr	r2, [pc, #328]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d040      	beq.n	8003154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e073      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003102:	4b3d      	ldr	r3, [pc, #244]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06b      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003112:	4b39      	ldr	r3, [pc, #228]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 0203 	bic.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4936      	ldr	r1, [pc, #216]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003124:	f7fe fbec 	bl	8001900 <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	e00a      	b.n	8003142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fe fbe8 	bl	8001900 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e053      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	4b2d      	ldr	r3, [pc, #180]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 020c 	and.w	r2, r3, #12
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	429a      	cmp	r2, r3
 8003152:	d1eb      	bne.n	800312c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003154:	4b27      	ldr	r3, [pc, #156]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d210      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b24      	ldr	r3, [pc, #144]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0207 	bic.w	r2, r3, #7
 800316a:	4922      	ldr	r1, [pc, #136]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ae:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f821 	bl	8003208 <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	490a      	ldr	r1, [pc, #40]	@ (80031fc <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <HAL_RCC_ClockConfig+0x1cc>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <HAL_RCC_ClockConfig+0x1d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fb4a 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	080041e4 	.word	0x080041e4
 8003200:	20000028 	.word	0x20000028
 8003204:	2000002c 	.word	0x2000002c

08003208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003222:	4b1e      	ldr	r3, [pc, #120]	@ (800329c <HAL_RCC_GetSysClockFreq+0x94>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x30>
 8003232:	2b08      	cmp	r3, #8
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x36>
 8003236:	e027      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003238:	4b19      	ldr	r3, [pc, #100]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800323a:	613b      	str	r3, [r7, #16]
      break;
 800323c:	e027      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003248:	5cd3      	ldrb	r3, [r2, r3]
 800324a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d010      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003256:	4b11      	ldr	r3, [pc, #68]	@ (800329c <HAL_RCC_GetSysClockFreq+0x94>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	0c5b      	lsrs	r3, r3, #17
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	4a11      	ldr	r2, [pc, #68]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a0d      	ldr	r2, [pc, #52]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800326a:	fb03 f202 	mul.w	r2, r3, r2
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e004      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a0c      	ldr	r2, [pc, #48]	@ (80032ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	613b      	str	r3, [r7, #16]
      break;
 8003286:	e002      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800328a:	613b      	str	r3, [r7, #16]
      break;
 800328c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328e:	693b      	ldr	r3, [r7, #16]
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	007a1200 	.word	0x007a1200
 80032a4:	080041fc 	.word	0x080041fc
 80032a8:	0800420c 	.word	0x0800420c
 80032ac:	003d0900 	.word	0x003d0900

080032b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b4:	4b02      	ldr	r3, [pc, #8]	@ (80032c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	20000028 	.word	0x20000028

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f7ff fff2 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	@ (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	080041f4 	.word	0x080041f4

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f0:	f7ff ffde 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	0adb      	lsrs	r3, r3, #11
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	@ (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	080041f4 	.word	0x080041f4

08003314 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800331c:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <RCC_Delay+0x34>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0a      	ldr	r2, [pc, #40]	@ (800334c <RCC_Delay+0x38>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0a5b      	lsrs	r3, r3, #9
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003330:	bf00      	nop
  }
  while (Delay --);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1e5a      	subs	r2, r3, #1
 8003336:	60fa      	str	r2, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f9      	bne.n	8003330 <RCC_Delay+0x1c>
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	20000028 	.word	0x20000028
 800334c:	10624dd3 	.word	0x10624dd3

08003350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe f946 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fab2 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e041      	b.n	8003484 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f839 	bl	800348c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f000 fa63 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_TIM_PWM_Start+0x24>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e022      	b.n	800350a <HAL_TIM_PWM_Start+0x6a>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d109      	bne.n	80034de <HAL_TIM_PWM_Start+0x3e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e015      	b.n	800350a <HAL_TIM_PWM_Start+0x6a>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d109      	bne.n	80034f8 <HAL_TIM_PWM_Start+0x58>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e008      	b.n	800350a <HAL_TIM_PWM_Start+0x6a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e05e      	b.n	80035d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_TIM_PWM_Start+0x82>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003520:	e013      	b.n	800354a <HAL_TIM_PWM_Start+0xaa>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d104      	bne.n	8003532 <HAL_TIM_PWM_Start+0x92>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003530:	e00b      	b.n	800354a <HAL_TIM_PWM_Start+0xaa>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d104      	bne.n	8003542 <HAL_TIM_PWM_Start+0xa2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003540:	e003      	b.n	800354a <HAL_TIM_PWM_Start+0xaa>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	6839      	ldr	r1, [r7, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fc5c 	bl	8003e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <HAL_TIM_PWM_Start+0x138>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d107      	bne.n	8003572 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a18      	ldr	r2, [pc, #96]	@ (80035d8 <HAL_TIM_PWM_Start+0x138>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_TIM_PWM_Start+0xfa>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003584:	d009      	beq.n	800359a <HAL_TIM_PWM_Start+0xfa>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a14      	ldr	r2, [pc, #80]	@ (80035dc <HAL_TIM_PWM_Start+0x13c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_TIM_PWM_Start+0xfa>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a12      	ldr	r2, [pc, #72]	@ (80035e0 <HAL_TIM_PWM_Start+0x140>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d111      	bne.n	80035be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b06      	cmp	r3, #6
 80035aa:	d010      	beq.n	80035ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035bc:	e007      	b.n	80035ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800

080035e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0ae      	b.n	8003760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	f200 809f 	bhi.w	8003750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003612:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800364d 	.word	0x0800364d
 800361c:	08003751 	.word	0x08003751
 8003620:	08003751 	.word	0x08003751
 8003624:	08003751 	.word	0x08003751
 8003628:	0800368d 	.word	0x0800368d
 800362c:	08003751 	.word	0x08003751
 8003630:	08003751 	.word	0x08003751
 8003634:	08003751 	.word	0x08003751
 8003638:	080036cf 	.word	0x080036cf
 800363c:	08003751 	.word	0x08003751
 8003640:	08003751 	.word	0x08003751
 8003644:	08003751 	.word	0x08003751
 8003648:	0800370f 	.word	0x0800370f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f9be 	bl	80039d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	619a      	str	r2, [r3, #24]
      break;
 800368a:	e064      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa04 	bl	8003aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6999      	ldr	r1, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
      break;
 80036cc:	e043      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fa4d 	bl	8003b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0208 	orr.w	r2, r2, #8
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0204 	bic.w	r2, r2, #4
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	61da      	str	r2, [r3, #28]
      break;
 800370c:	e023      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fa97 	bl	8003c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	61da      	str	r2, [r3, #28]
      break;
 800374e:	e002      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
      break;
 8003754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIM_ConfigClockSource+0x1c>
 8003780:	2302      	movs	r3, #2
 8003782:	e0b4      	b.n	80038ee <HAL_TIM_ConfigClockSource+0x186>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037bc:	d03e      	beq.n	800383c <HAL_TIM_ConfigClockSource+0xd4>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c2:	f200 8087 	bhi.w	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ca:	f000 8086 	beq.w	80038da <HAL_TIM_ConfigClockSource+0x172>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d2:	d87f      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b70      	cmp	r3, #112	@ 0x70
 80037d6:	d01a      	beq.n	800380e <HAL_TIM_ConfigClockSource+0xa6>
 80037d8:	2b70      	cmp	r3, #112	@ 0x70
 80037da:	d87b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b60      	cmp	r3, #96	@ 0x60
 80037de:	d050      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0x11a>
 80037e0:	2b60      	cmp	r3, #96	@ 0x60
 80037e2:	d877      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b50      	cmp	r3, #80	@ 0x50
 80037e6:	d03c      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0xfa>
 80037e8:	2b50      	cmp	r3, #80	@ 0x50
 80037ea:	d873      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b40      	cmp	r3, #64	@ 0x40
 80037ee:	d058      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x13a>
 80037f0:	2b40      	cmp	r3, #64	@ 0x40
 80037f2:	d86f      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b30      	cmp	r3, #48	@ 0x30
 80037f6:	d064      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 80037f8:	2b30      	cmp	r3, #48	@ 0x30
 80037fa:	d86b      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d060      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003800:	2b20      	cmp	r3, #32
 8003802:	d867      	bhi.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d05c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003808:	2b10      	cmp	r3, #16
 800380a:	d05a      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x15a>
 800380c:	e062      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800381e:	f000 fad8 	bl	8003dd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	609a      	str	r2, [r3, #8]
      break;
 800383a:	e04f      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800384c:	f000 fac1 	bl	8003dd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800385e:	609a      	str	r2, [r3, #8]
      break;
 8003860:	e03c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	461a      	mov	r2, r3
 8003870:	f000 fa38 	bl	8003ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2150      	movs	r1, #80	@ 0x50
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fa8f 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003880:	e02c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800388e:	461a      	mov	r2, r3
 8003890:	f000 fa56 	bl	8003d40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2160      	movs	r1, #96	@ 0x60
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fa7f 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80038a0:	e01c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 fa18 	bl	8003ce4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2140      	movs	r1, #64	@ 0x40
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fa6f 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80038c0:	e00c      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f000 fa66 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80038d2:	e003      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e000      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a2f      	ldr	r2, [pc, #188]	@ (80039c8 <TIM_Base_SetConfig+0xd0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x30>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x30>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a2c      	ldr	r2, [pc, #176]	@ (80039cc <TIM_Base_SetConfig+0xd4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x30>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a2b      	ldr	r2, [pc, #172]	@ (80039d0 <TIM_Base_SetConfig+0xd8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a22      	ldr	r2, [pc, #136]	@ (80039c8 <TIM_Base_SetConfig+0xd0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00b      	beq.n	800395a <TIM_Base_SetConfig+0x62>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003948:	d007      	beq.n	800395a <TIM_Base_SetConfig+0x62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a1f      	ldr	r2, [pc, #124]	@ (80039cc <TIM_Base_SetConfig+0xd4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <TIM_Base_SetConfig+0x62>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1e      	ldr	r2, [pc, #120]	@ (80039d0 <TIM_Base_SetConfig+0xd8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a0d      	ldr	r2, [pc, #52]	@ (80039c8 <TIM_Base_SetConfig+0xd0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d103      	bne.n	80039a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f023 0201 	bic.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	611a      	str	r2, [r3, #16]
  }
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800

080039d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f023 0201 	bic.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 0302 	bic.w	r3, r3, #2
 8003a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a9c <TIM_OC1_SetConfig+0xc8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d10c      	bne.n	8003a4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 0308 	bic.w	r3, r3, #8
 8003a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <TIM_OC1_SetConfig+0xc8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d111      	bne.n	8003a76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40012c00 	.word	0x40012c00

08003aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f023 0210 	bic.w	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0320 	bic.w	r3, r3, #32
 8003aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	@ (8003b70 <TIM_OC2_SetConfig+0xd0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d10d      	bne.n	8003b1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a14      	ldr	r2, [pc, #80]	@ (8003b70 <TIM_OC2_SetConfig+0xd0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d113      	bne.n	8003b4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00

08003b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c44 <TIM_OC3_SetConfig+0xd0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10d      	bne.n	8003bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	@ (8003c44 <TIM_OC3_SetConfig+0xd0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d113      	bne.n	8003c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00

08003c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce0 <TIM_OC4_SetConfig+0x98>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d109      	bne.n	8003cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	40012c00 	.word	0x40012c00

08003ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f023 030a 	bic.w	r3, r3, #10
 8003d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0210 	bic.w	r2, r3, #16
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	031b      	lsls	r3, r3, #12
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	621a      	str	r2, [r3, #32]
}
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f043 0307 	orr.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b087      	sub	sp, #28
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	021a      	lsls	r2, r3, #8
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	609a      	str	r2, [r3, #8]
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2201      	movs	r2, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	401a      	ands	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1a      	ldr	r2, [r3, #32]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e046      	b.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a16      	ldr	r2, [pc, #88]	@ (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d009      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a12      	ldr	r2, [pc, #72]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a10      	ldr	r2, [pc, #64]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10c      	bne.n	8003eec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800

08003f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e03d      	b.n	8003fac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e042      	b.n	800404e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fd fbc5 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2224      	movs	r2, #36	@ 0x24
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ff8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f82c 	bl	8004058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800400e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800401e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800402e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004092:	f023 030c 	bic.w	r3, r3, #12
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	430b      	orrs	r3, r1
 800409e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2c      	ldr	r2, [pc, #176]	@ (800416c <UART_SetConfig+0x114>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7ff f914 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	e002      	b.n	80040ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040c8:	f7ff f8fc 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 80040cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009a      	lsls	r2, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	4a22      	ldr	r2, [pc, #136]	@ (8004170 <UART_SetConfig+0x118>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	0119      	lsls	r1, r3, #4
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009a      	lsls	r2, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fbb2 f2f3 	udiv	r2, r2, r3
 8004104:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <UART_SetConfig+0x118>)
 8004106:	fba3 0302 	umull	r0, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2064      	movs	r0, #100	@ 0x64
 800410e:	fb00 f303 	mul.w	r3, r0, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	3332      	adds	r3, #50	@ 0x32
 8004118:	4a15      	ldr	r2, [pc, #84]	@ (8004170 <UART_SetConfig+0x118>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004124:	4419      	add	r1, r3
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009a      	lsls	r2, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	fbb2 f2f3 	udiv	r2, r2, r3
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <UART_SetConfig+0x118>)
 800413e:	fba3 0302 	umull	r0, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2064      	movs	r0, #100	@ 0x64
 8004146:	fb00 f303 	mul.w	r3, r0, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	@ 0x32
 8004150:	4a07      	ldr	r2, [pc, #28]	@ (8004170 <UART_SetConfig+0x118>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	440a      	add	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40013800 	.word	0x40013800
 8004170:	51eb851f 	.word	0x51eb851f

08004174 <memset>:
 8004174:	4603      	mov	r3, r0
 8004176:	4402      	add	r2, r0
 8004178:	4293      	cmp	r3, r2
 800417a:	d100      	bne.n	800417e <memset+0xa>
 800417c:	4770      	bx	lr
 800417e:	f803 1b01 	strb.w	r1, [r3], #1
 8004182:	e7f9      	b.n	8004178 <memset+0x4>

08004184 <__libc_init_array>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	2600      	movs	r6, #0
 8004188:	4d0c      	ldr	r5, [pc, #48]	@ (80041bc <__libc_init_array+0x38>)
 800418a:	4c0d      	ldr	r4, [pc, #52]	@ (80041c0 <__libc_init_array+0x3c>)
 800418c:	1b64      	subs	r4, r4, r5
 800418e:	10a4      	asrs	r4, r4, #2
 8004190:	42a6      	cmp	r6, r4
 8004192:	d109      	bne.n	80041a8 <__libc_init_array+0x24>
 8004194:	f000 f81a 	bl	80041cc <_init>
 8004198:	2600      	movs	r6, #0
 800419a:	4d0a      	ldr	r5, [pc, #40]	@ (80041c4 <__libc_init_array+0x40>)
 800419c:	4c0a      	ldr	r4, [pc, #40]	@ (80041c8 <__libc_init_array+0x44>)
 800419e:	1b64      	subs	r4, r4, r5
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	42a6      	cmp	r6, r4
 80041a4:	d105      	bne.n	80041b2 <__libc_init_array+0x2e>
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
 80041a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ac:	4798      	blx	r3
 80041ae:	3601      	adds	r6, #1
 80041b0:	e7ee      	b.n	8004190 <__libc_init_array+0xc>
 80041b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b6:	4798      	blx	r3
 80041b8:	3601      	adds	r6, #1
 80041ba:	e7f2      	b.n	80041a2 <__libc_init_array+0x1e>
 80041bc:	08004210 	.word	0x08004210
 80041c0:	08004210 	.word	0x08004210
 80041c4:	08004210 	.word	0x08004210
 80041c8:	08004214 	.word	0x08004214

080041cc <_init>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr

080041d8 <_fini>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr
