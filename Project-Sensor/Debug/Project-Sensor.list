
Project-Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e44  08004e44  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  08004e44  08004e44  00005e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e4c  08004e4c  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e4c  08004e4c  00005e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e50  08004e50  00005e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08004e54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000084  08004ed8  00006084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08004ed8  000064b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e8a  00000000  00000000  000060ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000308e  00000000  00000000  00019f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0001cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e70  00000000  00000000  0001e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a692  00000000  00000000  0001f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179f8  00000000  00000000  0003975a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926f1  00000000  00000000  00051152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000523c  00000000  00000000  000e3888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e8ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d68 	.word	0x08004d68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08004d68 	.word	0x08004d68

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CAN_ComInit_Std>:
	CAN_TxHeaderTypeDef *tx_header,
	CAN_HandleTypeDef *hcan,
	uint32_t id,
	uint8_t dlc
)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	70fb      	strb	r3, [r7, #3]
	tx_header->IDE 		= CAN_ID_STD;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	2200      	movs	r2, #0
 800016e:	609a      	str	r2, [r3, #8]
	tx_header->DLC 		= dlc;
 8000170:	78fa      	ldrb	r2, [r7, #3]
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	611a      	str	r2, [r3, #16]
	tx_header->StdId 	= id;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	687a      	ldr	r2, [r7, #4]
 800017a:	601a      	str	r2, [r3, #0]
	tx_header->RTR 		= CAN_RTR_DATA;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2200      	movs	r2, #0
 8000180:	60da      	str	r2, [r3, #12]

	HAL_CAN_Start(hcan);
 8000182:	68b8      	ldr	r0, [r7, #8]
 8000184:	f001 fa82 	bl	800168c <HAL_CAN_Start>
}
 8000188:	bf00      	nop
 800018a:	3710      	adds	r7, #16
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}

08000190 <CAN_Filter_SingleFF0_Config>:

void CAN_Filter_SingleFF0_Config(
	CAN_HandleTypeDef *hcan,
	CAN_FilterTypeDef *can_filter,
	uint32_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
	can_filter->FilterActivation = CAN_FILTER_ENABLE;
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	2201      	movs	r2, #1
 80001a0:	621a      	str	r2, [r3, #32]
	can_filter->FilterBank = 0;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	2200      	movs	r2, #0
 80001a6:	615a      	str	r2, [r3, #20]
	can_filter->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	2200      	movs	r2, #0
 80001ac:	611a      	str	r2, [r3, #16]
	can_filter->FilterIdHigh = addr << 5;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	015a      	lsls	r2, r3, #5
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	601a      	str	r2, [r3, #0]
	can_filter->FilterIdLow = 0x0000;
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	2200      	movs	r2, #0
 80001ba:	605a      	str	r2, [r3, #4]
	can_filter->FilterMaskIdHigh = addr << 5;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	015a      	lsls	r2, r3, #5
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	609a      	str	r2, [r3, #8]
	can_filter->FilterMaskIdLow = 0x0000;
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	2200      	movs	r2, #0
 80001c8:	60da      	str	r2, [r3, #12]
	can_filter->FilterMode = CAN_FILTERMODE_IDMASK;
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	2200      	movs	r2, #0
 80001ce:	619a      	str	r2, [r3, #24]
	can_filter->FilterScale = CAN_FILTERSCALE_32BIT;
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	2201      	movs	r2, #1
 80001d4:	61da      	str	r2, [r3, #28]

	HAL_CAN_ConfigFilter(hcan, can_filter);
 80001d6:	68b9      	ldr	r1, [r7, #8]
 80001d8:	68f8      	ldr	r0, [r7, #12]
 80001da:	f001 f98e 	bl	80014fa <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001de:	2102      	movs	r1, #2
 80001e0:	68f8      	ldr	r0, [r7, #12]
 80001e2:	f001 fc87 	bl	8001af4 <HAL_CAN_ActivateNotification>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <CAN_Transmit>:

HAL_StatusTypeDef CAN_Transmit(CAN_HandleTypeDef *hcan, CAN_TxHandlerTypeDef* tx_handler)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	6039      	str	r1, [r7, #0]
	if(HAL_CAN_AddTxMessage(hcan, &tx_handler->header, tx_handler->buffer, &Mailbox) != HAL_OK){
 80001fa:	6839      	ldr	r1, [r7, #0]
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	699a      	ldr	r2, [r3, #24]
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <CAN_Transmit+0x2c>)
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	f001 fa86 	bl	8001714 <HAL_CAN_AddTxMessage>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <CAN_Transmit+0x22>
		return HAL_ERROR;
 800020e:	2301      	movs	r3, #1
 8000210:	e000      	b.n	8000214 <CAN_Transmit+0x24>
	}
	return HAL_OK;
 8000212:	2300      	movs	r3, #0
}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	200000bc 	.word	0x200000bc

08000220 <TOF_InitStruct>:
	I2C_HandleTypeDef* hi2c,
	uint8_t address,
	GPIO_TypeDef* xshut_port,
	uint16_t xshut_pin
)
{
 8000220:	b480      	push	{r7}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	4613      	mov	r3, r2
 800022e:	71fb      	strb	r3, [r7, #7]
	if (address == INVALID_ADDR)
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b29      	cmp	r3, #41	@ 0x29
 8000234:	d102      	bne.n	800023c <TOF_InitStruct+0x1c>

	sensor->hi2c = hi2c;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	68ba      	ldr	r2, [r7, #8]
 800023a:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	79fa      	ldrb	r2, [r7, #7]
 8000240:	711a      	strb	r2, [r3, #4]

	sensor->xshut.port = xshut_port;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	683a      	ldr	r2, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]
	sensor->xshut.pin = xshut_pin;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	8c3a      	ldrh	r2, [r7, #32]
 800024c:	819a      	strh	r2, [r3, #12]

	// Find free slot
	uint8_t id;
	for (id = 0; (id < _VL53L1X_MAX_SENSORS) && registered_sensors[id] != NULL; id++);
 800024e:	2300      	movs	r3, #0
 8000250:	75fb      	strb	r3, [r7, #23]
 8000252:	e002      	b.n	800025a <TOF_InitStruct+0x3a>
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	3301      	adds	r3, #1
 8000258:	75fb      	strb	r3, [r7, #23]
 800025a:	7dfb      	ldrb	r3, [r7, #23]
 800025c:	2b09      	cmp	r3, #9
 800025e:	d805      	bhi.n	800026c <TOF_InitStruct+0x4c>
 8000260:	7dfb      	ldrb	r3, [r7, #23]
 8000262:	4a0c      	ldr	r2, [pc, #48]	@ (8000294 <TOF_InitStruct+0x74>)
 8000264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f3      	bne.n	8000254 <TOF_InitStruct+0x34>

	if (id >= _VL53L1X_MAX_SENSORS)
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	2b09      	cmp	r3, #9
 8000270:	d901      	bls.n	8000276 <TOF_InitStruct+0x56>
	{
		return TOO_MANY_SENSOR_ERR;
 8000272:	2301      	movs	r3, #1
 8000274:	e008      	b.n	8000288 <TOF_InitStruct+0x68>
	}

	sensor->id = id;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	7dfa      	ldrb	r2, [r7, #23]
 800027a:	741a      	strb	r2, [r3, #16]
	registered_sensors[id] = sensor;
 800027c:	7dfb      	ldrb	r3, [r7, #23]
 800027e:	4905      	ldr	r1, [pc, #20]	@ (8000294 <TOF_InitStruct+0x74>)
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return SUCCESS;
 8000286:	2300      	movs	r3, #0
}
 8000288:	4618      	mov	r0, r3
 800028a:	371c      	adds	r7, #28
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000108 	.word	0x20000108

08000298 <TOF_TurnOn>:

void TOF_TurnOn(const VL53L1X* sensor)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut.port, sensor->xshut.pin, GPIO_PIN_SET);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	6898      	ldr	r0, [r3, #8]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	899b      	ldrh	r3, [r3, #12]
 80002a8:	2201      	movs	r2, #1
 80002aa:	4619      	mov	r1, r3
 80002ac:	f002 f8fc 	bl	80024a8 <HAL_GPIO_WritePin>
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <TOF_TurnOff>:

void TOF_TurnOff(const VL53L1X* sensor)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->xshut.port, sensor->xshut.pin, GPIO_PIN_RESET);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6898      	ldr	r0, [r3, #8]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	899b      	ldrh	r3, [r3, #12]
 80002c8:	2200      	movs	r2, #0
 80002ca:	4619      	mov	r1, r3
 80002cc:	f002 f8ec 	bl	80024a8 <HAL_GPIO_WritePin>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <TOF_BootSensor>:

	return status;
}

int TOF_BootSensor(VL53L1X* sensor)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	int status = SUCCESS;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
	TOF_TurnOn(sensor);
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f7ff ffd7 	bl	8000298 <TOF_TurnOn>
    HAL_Delay(2); // Sometimes this is too fast and line can't settle
 80002ea:	2002      	movs	r0, #2
 80002ec:	f000 ffe6 	bl	80012bc <HAL_Delay>

    // Check if sensor is already configured with the correct address
    uint16_t id = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	817b      	strh	r3, [r7, #10]
    if (VL53L1X_GetSensorId(sensor->id, &id) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	7c1b      	ldrb	r3, [r3, #16]
 80002f8:	461a      	mov	r2, r3
 80002fa:	f107 030a 	add.w	r3, r7, #10
 80002fe:	4619      	mov	r1, r3
 8000300:	4610      	mov	r0, r2
 8000302:	f000 f984 	bl	800060e <VL53L1X_GetSensorId>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d01d      	beq.n	8000348 <TOF_BootSensor+0x70>
    {
    	if (VL53L1X_SetI2CAddress(sensor->id, sensor->address) != SUCCESS)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7c1b      	ldrb	r3, [r3, #16]
 8000310:	461a      	mov	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	4610      	mov	r0, r2
 800031a:	f000 f848 	bl	80003ae <VL53L1X_SetI2CAddress>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d011      	beq.n	8000348 <TOF_BootSensor+0x70>
    	{
    		switch(sensor->address){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	791b      	ldrb	r3, [r3, #4]
 8000328:	2b20      	cmp	r3, #32
 800032a:	d002      	beq.n	8000332 <TOF_BootSensor+0x5a>
 800032c:	2b26      	cmp	r3, #38	@ 0x26
 800032e:	d003      	beq.n	8000338 <TOF_BootSensor+0x60>
 8000330:	e005      	b.n	800033e <TOF_BootSensor+0x66>
    			case SENSOR_1_ADDR:
    				status = CONF_ADDR_ERR_SENSOR_1;
 8000332:	2301      	movs	r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
    				break;
 8000336:	e005      	b.n	8000344 <TOF_BootSensor+0x6c>
    			case SENSOR_2_ADDR:
    				status = CONF_ADDR_ERR_SENSOR_2;
 8000338:	2302      	movs	r3, #2
 800033a:	60fb      	str	r3, [r7, #12]
    				break;
 800033c:	e002      	b.n	8000344 <TOF_BootSensor+0x6c>
    			default:
    				status = CONF_UNKNOWN_ADDR;
 800033e:	2309      	movs	r3, #9
 8000340:	60fb      	str	r3, [r7, #12]
    				break;
 8000342:	bf00      	nop
    		}
    		return status;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	e014      	b.n	8000372 <TOF_BootSensor+0x9a>
    	}
    }

	// Initialize sensor
	if (VL53L1X_SensorInit(sensor->id) != SUCCESS)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	7c1b      	ldrb	r3, [r3, #16]
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f849 	bl	80003e4 <VL53L1X_SensorInit>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <TOF_BootSensor+0x84>
		status = INIT_ERR;
 8000358:	2303      	movs	r3, #3
 800035a:	60fb      	str	r3, [r7, #12]

	if (VL53L1X_StartRanging(sensor->id) != SUCCESS)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	7c1b      	ldrb	r3, [r3, #16]
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f8ed 	bl	8000540 <VL53L1X_StartRanging>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <TOF_BootSensor+0x98>
		status = RANGING_ERR;
 800036c:	2304      	movs	r3, #4
 800036e:	60fb      	str	r3, [r7, #12]

	return status;
 8000370:	68fb      	ldr	r3, [r7, #12]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <TOF_GetDistance>:

uint16_t TOF_GetDistance(const VL53L1X* sensor)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b084      	sub	sp, #16
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
	uint16_t reading = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	81fb      	strh	r3, [r7, #14]
	if(VL53L1X_GetDistance(sensor->id, &reading) != 0)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	7c1b      	ldrb	r3, [r3, #16]
 800038a:	461a      	mov	r2, r3
 800038c:	f107 030e 	add.w	r3, r7, #14
 8000390:	4619      	mov	r1, r3
 8000392:	4610      	mov	r0, r2
 8000394:	f000 f95b 	bl	800064e <VL53L1X_GetDistance>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d002      	beq.n	80003a4 <TOF_GetDistance+0x2a>
	{
		return 0xFFFF; // VL53L1X_GetDistance() returns the reading for previous sensor if reading failed
 800039e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003a2:	e000      	b.n	80003a6 <TOF_GetDistance+0x2c>
	}
	return reading;
 80003a4:	89fb      	ldrh	r3, [r7, #14]
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b084      	sub	sp, #16
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	4603      	mov	r3, r0
 80003b6:	460a      	mov	r2, r1
 80003b8:	80fb      	strh	r3, [r7, #6]
 80003ba:	4613      	mov	r3, r2
 80003bc:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 80003c2:	797a      	ldrb	r2, [r7, #5]
 80003c4:	88fb      	ldrh	r3, [r7, #6]
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fe4b 	bl	8001064 <VL53L1_WrByte>
 80003ce:	4603      	mov	r3, r0
 80003d0:	461a      	mov	r2, r3
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	73fb      	strb	r3, [r7, #15]
	return status;
 80003d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr = 0x00, tmp;
 80003f2:	2300      	movs	r3, #0
 80003f4:	73bb      	strb	r3, [r7, #14]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80003f6:	232d      	movs	r3, #45	@ 0x2d
 80003f8:	73bb      	strb	r3, [r7, #14]
 80003fa:	e011      	b.n	8000420 <VL53L1X_SensorInit+0x3c>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80003fc:	7bbb      	ldrb	r3, [r7, #14]
 80003fe:	b299      	uxth	r1, r3
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	3b2d      	subs	r3, #45	@ 0x2d
 8000404:	4a2c      	ldr	r2, [pc, #176]	@ (80004b8 <VL53L1X_SensorInit+0xd4>)
 8000406:	5cd2      	ldrb	r2, [r2, r3]
 8000408:	88fb      	ldrh	r3, [r7, #6]
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fe2a 	bl	8001064 <VL53L1_WrByte>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	4313      	orrs	r3, r2
 8000418:	73fb      	strb	r3, [r7, #15]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 800041a:	7bbb      	ldrb	r3, [r7, #14]
 800041c:	3301      	adds	r3, #1
 800041e:	73bb      	strb	r3, [r7, #14]
 8000420:	7bbb      	ldrb	r3, [r7, #14]
 8000422:	2b87      	cmp	r3, #135	@ 0x87
 8000424:	d9ea      	bls.n	80003fc <VL53L1X_SensorInit+0x18>
	}
	status |= VL53L1X_StartRanging(dev);
 8000426:	88fb      	ldrh	r3, [r7, #6]
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f889 	bl	8000540 <VL53L1X_StartRanging>
 800042e:	4603      	mov	r3, r0
 8000430:	461a      	mov	r2, r3
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	4313      	orrs	r3, r2
 8000436:	73fb      	strb	r3, [r7, #15]
	tmp  = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 800043c:	e00b      	b.n	8000456 <VL53L1X_SensorInit+0x72>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800043e:	f107 020d 	add.w	r2, r7, #13
 8000442:	88fb      	ldrh	r3, [r7, #6]
 8000444:	4611      	mov	r1, r2
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f8aa 	bl	80005a0 <VL53L1X_CheckForDataReady>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	4313      	orrs	r3, r2
 8000454:	73fb      	strb	r3, [r7, #15]
	while(tmp==0){
 8000456:	7b7b      	ldrb	r3, [r7, #13]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f0      	beq.n	800043e <VL53L1X_SensorInit+0x5a>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 800045c:	88fb      	ldrh	r3, [r7, #6]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f82c 	bl	80004bc <VL53L1X_ClearInterrupt>
 8000464:	4603      	mov	r3, r0
 8000466:	461a      	mov	r2, r3
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	4313      	orrs	r3, r2
 800046c:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1X_StopRanging(dev);
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	4618      	mov	r0, r3
 8000472:	f000 f87d 	bl	8000570 <VL53L1X_StopRanging>
 8000476:	4603      	mov	r3, r0
 8000478:	461a      	mov	r2, r3
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	4313      	orrs	r3, r2
 800047e:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000480:	88fb      	ldrh	r3, [r7, #6]
 8000482:	2209      	movs	r2, #9
 8000484:	2108      	movs	r1, #8
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fdec 	bl	8001064 <VL53L1_WrByte>
 800048c:	4603      	mov	r3, r0
 800048e:	461a      	mov	r2, r3
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	4313      	orrs	r3, r2
 8000494:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	2200      	movs	r2, #0
 800049a:	210b      	movs	r1, #11
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fde1 	bl	8001064 <VL53L1_WrByte>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	73fb      	strb	r3, [r7, #15]
	return status;
 80004ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	08004d88 	.word	0x08004d88

080004bc <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	2201      	movs	r2, #1
 80004ce:	2186      	movs	r1, #134	@ 0x86
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fdc7 	bl	8001064 <VL53L1_WrByte>
 80004d6:	4603      	mov	r3, r0
 80004d8:	461a      	mov	r2, r3
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	4313      	orrs	r3, r2
 80004de:	73fb      	strb	r3, [r7, #15]
	return status;
 80004e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80004fc:	f107 020e 	add.w	r2, r7, #14
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	2130      	movs	r1, #48	@ 0x30
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fdd9 	bl	80010bc <VL53L1_RdByte>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	4313      	orrs	r3, r2
 8000512:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	f003 0310 	and.w	r3, r3, #16
 800051a:	b2db      	uxtb	r3, r3
 800051c:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	091b      	lsrs	r3, r3, #4
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf0c      	ite	eq
 8000528:	2301      	moveq	r3, #1
 800052a:	2300      	movne	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	701a      	strb	r2, [r3, #0]
	return status;
 8000534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2240      	movs	r2, #64	@ 0x40
 8000552:	2187      	movs	r1, #135	@ 0x87
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fd85 	bl	8001064 <VL53L1_WrByte>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	4313      	orrs	r3, r2
 8000562:	73fb      	strb	r3, [r7, #15]
	return status;
 8000564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	2200      	movs	r2, #0
 8000582:	2187      	movs	r1, #135	@ 0x87
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fd6d 	bl	8001064 <VL53L1_WrByte>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	4313      	orrs	r3, r2
 8000592:	73fb      	strb	r3, [r7, #15]
	return status;
 8000594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80005b0:	f107 020d 	add.w	r2, r7, #13
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff97 	bl	80004ec <VL53L1X_GetInterruptPolarity>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	73fb      	strb	r3, [r7, #15]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80005c8:	f107 020e 	add.w	r2, r7, #14
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	2131      	movs	r1, #49	@ 0x31
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fd73 	bl	80010bc <VL53L1_RdByte>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	4313      	orrs	r3, r2
 80005de:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80005e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10c      	bne.n	8000602 <VL53L1X_CheckForDataReady+0x62>
		if ((Temp & 1) == IntPol)
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	7b7a      	ldrb	r2, [r7, #13]
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d103      	bne.n	80005fc <VL53L1X_CheckForDataReady+0x5c>
			*isDataReady = 1;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e002      	b.n	8000602 <VL53L1X_CheckForDataReady+0x62>
		else
			*isDataReady = 0;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	4603      	mov	r3, r0
 8000616:	6039      	str	r1, [r7, #0]
 8000618:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	81bb      	strh	r3, [r7, #12]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 8000622:	f107 020c 	add.w	r2, r7, #12
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	f240 110f 	movw	r1, #271	@ 0x10f
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fd7d 	bl	800112c <VL53L1_RdWord>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	4313      	orrs	r3, r2
 800063a:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 800063c:	89ba      	ldrh	r2, [r7, #12]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	801a      	strh	r2, [r3, #0]
	return status;
 8000642:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	6039      	str	r1, [r7, #0]
 8000658:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800065e:	f107 020c 	add.w	r2, r7, #12
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	2196      	movs	r1, #150	@ 0x96
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fd60 	bl	800112c <VL53L1_RdWord>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	4313      	orrs	r3, r2
 8000674:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8000676:	89ba      	ldrh	r2, [r7, #12]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	801a      	strh	r2, [r3, #0]
	return status;
 800067c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <VL53L1X_bootDualSensors>:
#include <VL53L1_Handler.h>

uint8_t VL53L1X_bootDualSensors(VL53L1X* sensor1, VL53L1X* sensor2)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	int status = SUCCESS;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
	TOF_TurnOff(sensor1);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff fe0e 	bl	80002b8 <TOF_TurnOff>
	TOF_TurnOff(sensor2);
 800069c:	6838      	ldr	r0, [r7, #0]
 800069e:	f7ff fe0b 	bl	80002b8 <TOF_TurnOff>

	status |= TOF_BootSensor(sensor1);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff fe18 	bl	80002d8 <TOF_BootSensor>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	60fb      	str	r3, [r7, #12]
	status |= TOF_BootSensor(sensor2);
 80006b0:	6838      	ldr	r0, [r7, #0]
 80006b2:	f7ff fe11 	bl	80002d8 <TOF_BootSensor>
 80006b6:	4602      	mov	r2, r0
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]

	return status;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	b2db      	uxtb	r3, r3
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <VL53L1X_errorHandler>:

void VL53L1X_errorHandler(int status) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	char buffer[10];
	sprintf(buffer, "%d", (int)status);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	490a      	ldr	r1, [pc, #40]	@ (8000704 <VL53L1X_errorHandler+0x38>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fe93 	bl	8004408 <siprintf>
	HAL_UART_Transmit(&huart1, buffer, strlen(buffer), HAL_MAX_DELAY);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fd30 	bl	800014c <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f107 010c 	add.w	r1, r7, #12
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <VL53L1X_errorHandler+0x3c>)
 80006fa:	f003 fcb0 	bl	800405e <HAL_UART_Transmit>
	while (1) {}
 80006fe:	bf00      	nop
 8000700:	e7fd      	b.n	80006fe <VL53L1X_errorHandler+0x32>
 8000702:	bf00      	nop
 8000704:	08004d80 	.word	0x08004d80
 8000708:	20000224 	.word	0x20000224

0800070c <VL53L1X_getDistance>:
}

HAL_StatusTypeDef VL53L1X_getDistance(VL53L1X* sensor) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	sensor->distance = TOF_GetDistance(sensor);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff fe30 	bl	800037a <TOF_GetDistance>
 800071a:	4603      	mov	r3, r0
 800071c:	b21a      	sxth	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	825a      	strh	r2, [r3, #18]
	return sensor->distance == 0xFFFF ? HAL_ERROR : HAL_OK;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	8a5b      	ldrh	r3, [r3, #18]
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_CAN_Init+0x68>)
 8000736:	4a19      	ldr	r2, [pc, #100]	@ (800079c <MX_CAN_Init+0x6c>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_CAN_Init+0x68>)
 800073c:	2204      	movs	r2, #4
 800073e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_CAN_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_CAN_Init+0x68>)
 8000748:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800074c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_CAN_Init+0x68>)
 8000750:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000754:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_CAN_Init+0x68>)
 8000758:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800075c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_CAN_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_CAN_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_CAN_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_CAN_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_CAN_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_CAN_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_CAN_Init+0x68>)
 8000784:	f000 fdbe 	bl	8001304 <HAL_CAN_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800078e:	f000 faca 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000130 	.word	0x20000130
 800079c:	40006400 	.word	0x40006400

080007a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a20      	ldr	r2, [pc, #128]	@ (800083c <HAL_CAN_MspInit+0x9c>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d139      	bne.n	8000834 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <HAL_CAN_MspInit+0xa0>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000840 <HAL_CAN_MspInit+0xa0>)
 80007c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ca:	61d3      	str	r3, [r2, #28]
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <HAL_CAN_MspInit+0xa0>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <HAL_CAN_MspInit+0xa0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a18      	ldr	r2, [pc, #96]	@ (8000840 <HAL_CAN_MspInit+0xa0>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <HAL_CAN_MspInit+0xa0>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	480f      	ldr	r0, [pc, #60]	@ (8000844 <HAL_CAN_MspInit+0xa4>)
 8000806:	f001 fccb 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800080a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	4809      	ldr	r0, [pc, #36]	@ (8000844 <HAL_CAN_MspInit+0xa4>)
 8000820:	f001 fcbe 	bl	80021a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2014      	movs	r0, #20
 800082a:	f001 fc82 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800082e:	2014      	movs	r0, #20
 8000830:	f001 fc9b 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40006400 	.word	0x40006400
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a2d      	ldr	r2, [pc, #180]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0310 	and.w	r3, r3, #16
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a27      	ldr	r2, [pc, #156]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800087a:	f043 0320 	orr.w	r3, r3, #32
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0320 	and.w	r3, r3, #32
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO10_Pin|XSHUT1_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80008c2:	4816      	ldr	r0, [pc, #88]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008c4:	f001 fdf0 	bl	80024a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|XSHUT2_Pin
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 80008ce:	4814      	ldr	r0, [pc, #80]	@ (8000920 <MX_GPIO_Init+0xd8>)
 80008d0:	f001 fdea 	bl	80024a8 <HAL_GPIO_WritePin>
                          |GPIO11_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO10_Pin|XSHUT1_Pin;
 80008d4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008ee:	f001 fc57 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|XSHUT2_Pin
 80008f2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008f6:	613b      	str	r3, [r7, #16]
                          |GPIO11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_GPIO_Init+0xd8>)
 800090c:	f001 fc48 	bl	80021a0 <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	40011000 	.word	0x40011000
 8000920:	40010c00 	.word	0x40010c00

08000924 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	@ (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f001 fdb9 	bl	80024d8 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f9db 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000158 	.word	0x20000158
 8000978:	40005400 	.word	0x40005400
 800097c:	00061a80 	.word	0x00061a80

08000980 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a15      	ldr	r2, [pc, #84]	@ (80009f0 <HAL_I2C_MspInit+0x70>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d123      	bne.n	80009e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <HAL_I2C_MspInit+0x74>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a13      	ldr	r2, [pc, #76]	@ (80009f4 <HAL_I2C_MspInit+0x74>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_I2C_MspInit+0x74>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009b8:	23c0      	movs	r3, #192	@ 0xc0
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <HAL_I2C_MspInit+0x78>)
 80009cc:	f001 fbe8 	bl	80021a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HAL_I2C_MspInit+0x74>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <HAL_I2C_MspInit+0x74>)
 80009d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009da:	61d3      	str	r3, [r2, #28]
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_I2C_MspInit+0x74>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40005400 	.word	0x40005400
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010c00 	.word	0x40010c00

080009fc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_handler.header, rx_handler.buffer)){
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 ff50 	bl	80018b2 <HAL_CAN_GetRxMessage>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		Error_Handler();
 8000a18:	f000 f985 	bl	8000d26 <Error_Handler>
	}
	received_signal = rx_handler.buffer[0];
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000a24:	701a      	strb	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000c0 	.word	0x200000c0
 8000a34:	200001d6 	.word	0x200001d6

08000a38 <getState>:

uint8_t getState(int distance1, int distance2)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if (distance2 <= 900 || distance1 <= 900) {
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000a48:	dd03      	ble.n	8000a52 <getState+0x1a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000a50:	dc07      	bgt.n	8000a62 <getState+0x2a>
		return distance2 < distance1 ? FORWARD_LEFT_STATE : FORWARD_RIGHT_STATE;
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	da01      	bge.n	8000a5e <getState+0x26>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e010      	b.n	8000a80 <getState+0x48>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e00e      	b.n	8000a80 <getState+0x48>
	} else if (distance2 <= 100 || distance1 <= 100) {
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b64      	cmp	r3, #100	@ 0x64
 8000a66:	dd02      	ble.n	8000a6e <getState+0x36>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b64      	cmp	r3, #100	@ 0x64
 8000a6c:	dc07      	bgt.n	8000a7e <getState+0x46>
		return distance1 < distance2 ? BACKWARD_LEFT_STATE : BACKWARD_RIGHT_STATE;
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	da01      	bge.n	8000a7a <getState+0x42>
 8000a76:	2304      	movs	r3, #4
 8000a78:	e002      	b.n	8000a80 <getState+0x48>
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	e000      	b.n	8000a80 <getState+0x48>
	}
	return FORWARD_STATE;
 8000a7e:	2303      	movs	r3, #3
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
	...

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a92:	f000 fbb1 	bl	80011f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a96:	f000 f901 	bl	8000c9c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a9a:	f7ff fed5 	bl	8000848 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a9e:	f7ff ff41 	bl	8000924 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000aa2:	f000 f9f5 	bl	8000e90 <MX_USART1_UART_Init>
	MX_CAN_Init();
 8000aa6:	f7ff fe43 	bl	8000730 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	TOF_InitStruct(&sensor1, &hi2c1, 0x22, XSHUT1_GPIO_Port, XSHUT1_Pin);
 8000aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8000c5c <main+0x1d0>)
 8000ab2:	2222      	movs	r2, #34	@ 0x22
 8000ab4:	496a      	ldr	r1, [pc, #424]	@ (8000c60 <main+0x1d4>)
 8000ab6:	486b      	ldr	r0, [pc, #428]	@ (8000c64 <main+0x1d8>)
 8000ab8:	f7ff fbb2 	bl	8000220 <TOF_InitStruct>
	TOF_InitStruct(&sensor2, &hi2c1, 0x26, XSHUT2_GPIO_Port, XSHUT2_Pin);
 8000abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	4b69      	ldr	r3, [pc, #420]	@ (8000c68 <main+0x1dc>)
 8000ac4:	2226      	movs	r2, #38	@ 0x26
 8000ac6:	4966      	ldr	r1, [pc, #408]	@ (8000c60 <main+0x1d4>)
 8000ac8:	4868      	ldr	r0, [pc, #416]	@ (8000c6c <main+0x1e0>)
 8000aca:	f7ff fba9 	bl	8000220 <TOF_InitStruct>
	int status = VL53L1X_bootDualSensors(&sensor1, &sensor2);
 8000ace:	4967      	ldr	r1, [pc, #412]	@ (8000c6c <main+0x1e0>)
 8000ad0:	4864      	ldr	r0, [pc, #400]	@ (8000c64 <main+0x1d8>)
 8000ad2:	f7ff fdd9 	bl	8000688 <VL53L1X_bootDualSensors>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	607b      	str	r3, [r7, #4]
	if (status != SUCCESS) {
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <main+0x5a>
		VL53L1X_errorHandler(status);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fdf3 	bl	80006cc <VL53L1X_errorHandler>
	}
	CAN_Filter_SingleFF0_Config(&hcan, &can_filter, ACTUATOR_ADDR);
 8000ae6:	22a2      	movs	r2, #162	@ 0xa2
 8000ae8:	4961      	ldr	r1, [pc, #388]	@ (8000c70 <main+0x1e4>)
 8000aea:	4862      	ldr	r0, [pc, #392]	@ (8000c74 <main+0x1e8>)
 8000aec:	f7ff fb50 	bl	8000190 <CAN_Filter_SingleFF0_Config>
	CAN_ComInit_Std(&tx_handler.header, &hcan, SENSOR_ADDR, 2);
 8000af0:	2302      	movs	r3, #2
 8000af2:	2212      	movs	r2, #18
 8000af4:	495f      	ldr	r1, [pc, #380]	@ (8000c74 <main+0x1e8>)
 8000af6:	4860      	ldr	r0, [pc, #384]	@ (8000c78 <main+0x1ec>)
 8000af8:	f7ff fb30 	bl	800015c <CAN_ComInit_Std>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (directionChange) {
 8000afc:	4b5f      	ldr	r3, [pc, #380]	@ (8000c7c <main+0x1f0>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d00e      	beq.n	8000b22 <main+0x96>
			if (directionChange == BACKWARD_RIGHT_STATE) {
 8000b04:	4b5d      	ldr	r3, [pc, #372]	@ (8000c7c <main+0x1f0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b05      	cmp	r3, #5
 8000b0a:	d103      	bne.n	8000b14 <main+0x88>
				state = FORWARD_LEFT_STATE;
 8000b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8000c80 <main+0x1f4>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e002      	b.n	8000b1a <main+0x8e>
			} else {
				state = FORWARD_RIGHT_STATE;
 8000b14:	4b5a      	ldr	r3, [pc, #360]	@ (8000c80 <main+0x1f4>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	701a      	strb	r2, [r3, #0]
			}
			directionChange = 0;
 8000b1a:	4b58      	ldr	r3, [pc, #352]	@ (8000c7c <main+0x1f0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e014      	b.n	8000b4c <main+0xc0>
		} else {
			VL53L1X_getDistance(&sensor1);
 8000b22:	4850      	ldr	r0, [pc, #320]	@ (8000c64 <main+0x1d8>)
 8000b24:	f7ff fdf2 	bl	800070c <VL53L1X_getDistance>
			VL53L1X_getDistance(&sensor2);
 8000b28:	4850      	ldr	r0, [pc, #320]	@ (8000c6c <main+0x1e0>)
 8000b2a:	f7ff fdef 	bl	800070c <VL53L1X_getDistance>

			state = getState(sensor1.distance, sensor2.distance);
 8000b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000c64 <main+0x1d8>)
 8000b30:	8a5b      	ldrh	r3, [r3, #18]
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b4d      	ldr	r3, [pc, #308]	@ (8000c6c <main+0x1e0>)
 8000b38:	8a5b      	ldrh	r3, [r3, #18]
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4610      	mov	r0, r2
 8000b40:	f7ff ff7a 	bl	8000a38 <getState>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b4d      	ldr	r3, [pc, #308]	@ (8000c80 <main+0x1f4>)
 8000b4a:	701a      	strb	r2, [r3, #0]
		}


		switch (state) {
 8000b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c80 <main+0x1f4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d87f      	bhi.n	8000c56 <main+0x1ca>
 8000b56:	a201      	add	r2, pc, #4	@ (adr r2, 8000b5c <main+0xd0>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b71 	.word	0x08000b71
 8000b60:	08000b8f 	.word	0x08000b8f
 8000b64:	08000bad 	.word	0x08000bad
 8000b68:	08000bc3 	.word	0x08000bc3
 8000b6c:	08000c0d 	.word	0x08000c0d
		case FORWARD_LEFT_STATE:

			directionChange = 0;
 8000b70:	4b42      	ldr	r3, [pc, #264]	@ (8000c7c <main+0x1f0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
			tx_handler.buffer = f_left_buffer;
 8000b76:	4b40      	ldr	r3, [pc, #256]	@ (8000c78 <main+0x1ec>)
 8000b78:	4a42      	ldr	r2, [pc, #264]	@ (8000c84 <main+0x1f8>)
 8000b7a:	619a      	str	r2, [r3, #24]
			do {
				CAN_Transmit(&hcan, &tx_handler);
 8000b7c:	493e      	ldr	r1, [pc, #248]	@ (8000c78 <main+0x1ec>)
 8000b7e:	483d      	ldr	r0, [pc, #244]	@ (8000c74 <main+0x1e8>)
 8000b80:	f7ff fb36 	bl	80001f0 <CAN_Transmit>
			} while (received_signal != FORWARD_LEFT_STATE);
 8000b84:	4b40      	ldr	r3, [pc, #256]	@ (8000c88 <main+0x1fc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d1f7      	bne.n	8000b7c <main+0xf0>
			break;
 8000b8c:	e064      	b.n	8000c58 <main+0x1cc>

		case FORWARD_RIGHT_STATE:

			directionChange = 0;
 8000b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c7c <main+0x1f0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
			tx_handler.buffer = f_right_buffer;
 8000b94:	4b38      	ldr	r3, [pc, #224]	@ (8000c78 <main+0x1ec>)
 8000b96:	4a3d      	ldr	r2, [pc, #244]	@ (8000c8c <main+0x200>)
 8000b98:	619a      	str	r2, [r3, #24]
			do {
				CAN_Transmit(&hcan, &tx_handler);
 8000b9a:	4937      	ldr	r1, [pc, #220]	@ (8000c78 <main+0x1ec>)
 8000b9c:	4835      	ldr	r0, [pc, #212]	@ (8000c74 <main+0x1e8>)
 8000b9e:	f7ff fb27 	bl	80001f0 <CAN_Transmit>
			} while (received_signal != FORWARD_RIGHT_STATE);
 8000ba2:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <main+0x1fc>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d1f7      	bne.n	8000b9a <main+0x10e>
			break;
 8000baa:	e055      	b.n	8000c58 <main+0x1cc>

		case FORWARD_STATE:

			directionChange = 0;
 8000bac:	4b33      	ldr	r3, [pc, #204]	@ (8000c7c <main+0x1f0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
			tx_handler.buffer = f_buffer;
 8000bb2:	4b31      	ldr	r3, [pc, #196]	@ (8000c78 <main+0x1ec>)
 8000bb4:	4a36      	ldr	r2, [pc, #216]	@ (8000c90 <main+0x204>)
 8000bb6:	619a      	str	r2, [r3, #24]
			CAN_Transmit(&hcan, &tx_handler);
 8000bb8:	492f      	ldr	r1, [pc, #188]	@ (8000c78 <main+0x1ec>)
 8000bba:	482e      	ldr	r0, [pc, #184]	@ (8000c74 <main+0x1e8>)
 8000bbc:	f7ff fb18 	bl	80001f0 <CAN_Transmit>
			break;
 8000bc0:	e04a      	b.n	8000c58 <main+0x1cc>

		case BACKWARD_LEFT_STATE:

			tx_handler.buffer = b_left_buffer;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c78 <main+0x1ec>)
 8000bc4:	4a33      	ldr	r2, [pc, #204]	@ (8000c94 <main+0x208>)
 8000bc6:	619a      	str	r2, [r3, #24]
			CAN_Transmit(&hcan, &tx_handler);
 8000bc8:	492b      	ldr	r1, [pc, #172]	@ (8000c78 <main+0x1ec>)
 8000bca:	482a      	ldr	r0, [pc, #168]	@ (8000c74 <main+0x1e8>)
 8000bcc:	f7ff fb10 	bl	80001f0 <CAN_Transmit>
			while (state == BACKWARD_LEFT_STATE) {
 8000bd0:	e014      	b.n	8000bfc <main+0x170>
				VL53L1X_getDistance(&sensor1);
 8000bd2:	4824      	ldr	r0, [pc, #144]	@ (8000c64 <main+0x1d8>)
 8000bd4:	f7ff fd9a 	bl	800070c <VL53L1X_getDistance>
				VL53L1X_getDistance(&sensor2);
 8000bd8:	4824      	ldr	r0, [pc, #144]	@ (8000c6c <main+0x1e0>)
 8000bda:	f7ff fd97 	bl	800070c <VL53L1X_getDistance>

				state = getState(sensor1.distance, sensor2.distance);
 8000bde:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <main+0x1d8>)
 8000be0:	8a5b      	ldrh	r3, [r3, #18]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b21      	ldr	r3, [pc, #132]	@ (8000c6c <main+0x1e0>)
 8000be8:	8a5b      	ldrh	r3, [r3, #18]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	4610      	mov	r0, r2
 8000bf0:	f7ff ff22 	bl	8000a38 <getState>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <main+0x1f4>)
 8000bfa:	701a      	strb	r2, [r3, #0]
			while (state == BACKWARD_LEFT_STATE) {
 8000bfc:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <main+0x1f4>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	d0e6      	beq.n	8000bd2 <main+0x146>
			}
			directionChange = BACKWARD_LEFT_STATE;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <main+0x1f0>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	701a      	strb	r2, [r3, #0]
			break;
 8000c0a:	e025      	b.n	8000c58 <main+0x1cc>

		case BACKWARD_RIGHT_STATE:

			tx_handler.buffer = b_right_buffer;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <main+0x1ec>)
 8000c0e:	4a22      	ldr	r2, [pc, #136]	@ (8000c98 <main+0x20c>)
 8000c10:	619a      	str	r2, [r3, #24]
			CAN_Transmit(&hcan, &tx_handler);
 8000c12:	4919      	ldr	r1, [pc, #100]	@ (8000c78 <main+0x1ec>)
 8000c14:	4817      	ldr	r0, [pc, #92]	@ (8000c74 <main+0x1e8>)
 8000c16:	f7ff faeb 	bl	80001f0 <CAN_Transmit>
			while (state == BACKWARD_RIGHT_STATE) {
 8000c1a:	e014      	b.n	8000c46 <main+0x1ba>
				VL53L1X_getDistance(&sensor1);
 8000c1c:	4811      	ldr	r0, [pc, #68]	@ (8000c64 <main+0x1d8>)
 8000c1e:	f7ff fd75 	bl	800070c <VL53L1X_getDistance>
				VL53L1X_getDistance(&sensor2);
 8000c22:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <main+0x1e0>)
 8000c24:	f7ff fd72 	bl	800070c <VL53L1X_getDistance>

				state = getState(sensor1.distance, sensor2.distance);
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <main+0x1d8>)
 8000c2a:	8a5b      	ldrh	r3, [r3, #18]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <main+0x1e0>)
 8000c32:	8a5b      	ldrh	r3, [r3, #18]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f7ff fefd 	bl	8000a38 <getState>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <main+0x1f4>)
 8000c44:	701a      	strb	r2, [r3, #0]
			while (state == BACKWARD_RIGHT_STATE) {
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <main+0x1f4>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b05      	cmp	r3, #5
 8000c4c:	d0e6      	beq.n	8000c1c <main+0x190>
			}
			directionChange = BACKWARD_RIGHT_STATE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <main+0x1f0>)
 8000c50:	2205      	movs	r2, #5
 8000c52:	701a      	strb	r2, [r3, #0]
			break;
 8000c54:	e000      	b.n	8000c58 <main+0x1cc>

		default:
			break;
 8000c56:	bf00      	nop
		if (directionChange) {
 8000c58:	e750      	b.n	8000afc <main+0x70>
 8000c5a:	bf00      	nop
 8000c5c:	40011000 	.word	0x40011000
 8000c60:	20000158 	.word	0x20000158
 8000c64:	200001ac 	.word	0x200001ac
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	200001c0 	.word	0x200001c0
 8000c70:	200000e0 	.word	0x200000e0
 8000c74:	20000130 	.word	0x20000130
 8000c78:	200000a0 	.word	0x200000a0
 8000c7c:	200001d5 	.word	0x200001d5
 8000c80:	200001d4 	.word	0x200001d4
 8000c84:	20000018 	.word	0x20000018
 8000c88:	200001d6 	.word	0x200001d6
 8000c8c:	20000020 	.word	0x20000020
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000010 	.word	0x20000010

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	@ 0x40
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2228      	movs	r2, #40	@ 0x28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fbcc 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cda:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fc2b 	bl	8003540 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f819 	bl	8000d26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 fe98 	bl	8003a44 <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d1a:	f000 f804 	bl	8000d26 <Error_Handler>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3740      	adds	r7, #64	@ 0x40
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2a:	b672      	cpsid	i
}
 8000d2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2e:	bf00      	nop
 8000d30:	e7fd      	b.n	8000d2e <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a14      	ldr	r2, [pc, #80]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <NMI_Handler+0x4>

08000da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 fa4c 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000df6:	f000 fea2 	bl	8001b3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000130 	.word	0x20000130

08000e04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <TIM3_IRQHandler+0x10>)
 8000e0a:	f002 ffa9 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001dc 	.word	0x200001dc

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f003 fb06 	bl	8004458 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20005000 	.word	0x20005000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200001d8 	.word	0x200001d8
 8000e80:	200004b8 	.word	0x200004b8

08000e84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <MX_USART1_UART_Init+0x50>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_USART1_UART_Init+0x4c>)
 8000ec8:	f003 f879 	bl	8003fbe <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ed2:	f7ff ff28 	bl	8000d26 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000224 	.word	0x20000224
 8000ee0:	40013800 	.word	0x40013800

08000ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1c      	ldr	r2, [pc, #112]	@ (8000f70 <HAL_UART_MspInit+0x8c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d131      	bne.n	8000f68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <HAL_UART_MspInit+0x90>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a1a      	ldr	r2, [pc, #104]	@ (8000f74 <HAL_UART_MspInit+0x90>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <HAL_UART_MspInit+0x90>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_UART_MspInit+0x90>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <HAL_UART_MspInit+0x90>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_UART_MspInit+0x90>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <HAL_UART_MspInit+0x94>)
 8000f4a:	f001 f929 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <HAL_UART_MspInit+0x94>)
 8000f64:	f001 f91c 	bl	80021a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40013800 	.word	0x40013800
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010800 	.word	0x40010800

08000f7c <_GetTof>:
extern VL53L1X* registered_sensors[];
extern size_t registered_sensors_cnt;
uint8_t _I2CBuffer[256];

VL53L1X* _GetTof(uint16_t dev)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e016      	b.n	8000fba <_GetTof+0x3e>
		if (registered_sensors[i] != NULL && registered_sensors[i]->id == dev)
 8000f8c:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <_GetTof+0x54>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00d      	beq.n	8000fb4 <_GetTof+0x38>
 8000f98:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd0 <_GetTof+0x54>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	7c1b      	ldrb	r3, [r3, #16]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d104      	bne.n	8000fb4 <_GetTof+0x38>
		{
			return registered_sensors[i];
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <_GetTof+0x54>)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	e008      	b.n	8000fc6 <_GetTof+0x4a>
	for (size_t i = 0; i < registered_sensors_cnt; i++)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <_GetTof+0x58>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3e3      	bcc.n	8000f8c <_GetTof+0x10>
		}

	return NULL;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000108 	.word	0x20000108
 8000fd4:	08004d84 	.word	0x08004d84

08000fd8 <_I2CWrite>:

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffc7 	bl	8000f7c <_GetTof>
 8000fee:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <_I2CWrite+0x22>
		return 1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00d      	b.n	8001016 <_I2CWrite+0x3e>

	return (int) HAL_I2C_Master_Transmit(tof->hi2c, tof->address << 1, pdata, count, 100);
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	791b      	ldrb	r3, [r3, #4]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	b299      	uxth	r1, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	b29b      	uxth	r3, r3
 800100a:	2264      	movs	r2, #100	@ 0x64
 800100c:	9200      	str	r2, [sp, #0]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f001 fba6 	bl	8002760 <HAL_I2C_Master_Transmit>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b088      	sub	sp, #32
 8001022:	af02      	add	r7, sp, #8
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	81fb      	strh	r3, [r7, #14]
	VL53L1X* tof = _GetTof(dev);
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffa4 	bl	8000f7c <_GetTof>
 8001034:	6178      	str	r0, [r7, #20]
	if (tof == NULL)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <_I2CRead+0x22>
		return 1;
 800103c:	2301      	movs	r3, #1
 800103e:	e00d      	b.n	800105c <_I2CRead+0x3e>

    return (int) HAL_I2C_Master_Receive(tof->hi2c, tof->address << 1, pdata, count, 100);
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	791b      	ldrb	r3, [r3, #4]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b299      	uxth	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	b29b      	uxth	r3, r3
 8001050:	2264      	movs	r2, #100	@ 0x64
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	f001 fc81 	bl	800295c <HAL_I2C_Master_Receive>
 800105a:	4603      	mov	r3, r0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
 800106e:	460b      	mov	r3, r1
 8001070:	80bb      	strh	r3, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b29b      	uxth	r3, r3
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <VL53L1_WrByte+0x54>)
 8001084:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <VL53L1_WrByte+0x54>)
 800108c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <VL53L1_WrByte+0x54>)
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	7093      	strb	r3, [r2, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	2203      	movs	r2, #3
 8001098:	4907      	ldr	r1, [pc, #28]	@ (80010b8 <VL53L1_WrByte+0x54>)
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff9c 	bl	8000fd8 <_I2CWrite>
 80010a0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80010a8:	23f3      	movs	r3, #243	@ 0xf3
 80010aa:	73fb      	strb	r3, [r7, #15]
    }
    return Status;}
 80010ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000026c 	.word	0x2000026c

080010bc <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	603a      	str	r2, [r7, #0]
 80010c6:	80fb      	strh	r3, [r7, #6]
 80010c8:	460b      	mov	r3, r1
 80010ca:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80010d0:	88bb      	ldrh	r3, [r7, #4]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <VL53L1_RdByte+0x6c>)
 80010da:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <VL53L1_RdByte+0x6c>)
 80010e2:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	2202      	movs	r2, #2
 80010e8:	490f      	ldr	r1, [pc, #60]	@ (8001128 <VL53L1_RdByte+0x6c>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff74 	bl	8000fd8 <_I2CWrite>
 80010f0:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80010f8:	23f3      	movs	r3, #243	@ 0xf3
 80010fa:	73fb      	strb	r3, [r7, #15]
        goto done;
 80010fc:	e00d      	b.n	800111a <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	2201      	movs	r2, #1
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff8a 	bl	800101e <_I2CRead>
 800110a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001112:	23f3      	movs	r3, #243	@ 0xf3
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e000      	b.n	800111a <VL53L1_RdByte+0x5e>
    }
done:
 8001118:	bf00      	nop

	return Status;
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000026c 	.word	0x2000026c

0800112c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	603a      	str	r2, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	460b      	mov	r3, r1
 800113a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	b29b      	uxth	r3, r3
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <VL53L1_RdWord+0x7c>)
 800114a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <VL53L1_RdWord+0x7c>)
 8001152:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	2202      	movs	r2, #2
 8001158:	4913      	ldr	r1, [pc, #76]	@ (80011a8 <VL53L1_RdWord+0x7c>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff3c 	bl	8000fd8 <_I2CWrite>
 8001160:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001168:	23f3      	movs	r3, #243	@ 0xf3
 800116a:	73fb      	strb	r3, [r7, #15]
        goto done;
 800116c:	e016      	b.n	800119c <VL53L1_RdWord+0x70>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	2202      	movs	r2, #2
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <VL53L1_RdWord+0x7c>)
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff52 	bl	800101e <_I2CRead>
 800117a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001182:	23f3      	movs	r3, #243	@ 0xf3
 8001184:	73fb      	strb	r3, [r7, #15]
        goto done;
 8001186:	e009      	b.n	800119c <VL53L1_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <VL53L1_RdWord+0x7c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <VL53L1_RdWord+0x7c>)
 8001192:	7852      	ldrb	r2, [r2, #1]
 8001194:	4413      	add	r3, r2
 8001196:	b29a      	uxth	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 800119c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000026c 	.word	0x2000026c

080011ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ac:	f7ff fe6a 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b2:	490c      	ldr	r1, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c8:	4c09      	ldr	r4, [pc, #36]	@ (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f003 f945 	bl	8004464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff fc57 	bl	8000a8c <main>
  bx lr
 80011de:	4770      	bx	lr
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80011e8:	08004e54 	.word	0x08004e54
  ldr r2, =_sbss
 80011ec:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80011f0:	200004b8 	.word	0x200004b8

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 ff87 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fd8e 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 ff9f 	bl	8002186 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 ff67 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000028 	.word	0x20000028
 800127c:	20000030 	.word	0x20000030
 8001280:	2000002c 	.word	0x2000002c

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	@ (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000030 	.word	0x20000030
 80012a4:	2000036c 	.word	0x2000036c

080012a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	2000036c 	.word	0x2000036c

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fff0 	bl	80012a8 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffe0 	bl	80012a8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000030 	.word	0x20000030

08001304 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0ed      	b.n	80014f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fa3c 	bl	80007a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001338:	f7ff ffb6 	bl	80012a8 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133e:	e012      	b.n	8001366 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001340:	f7ff ffb2 	bl	80012a8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d90b      	bls.n	8001366 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0c5      	b.n	80014f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0e5      	beq.n	8001340 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0202 	bic.w	r2, r2, #2
 8001382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001384:	f7ff ff90 	bl	80012a8 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800138a:	e012      	b.n	80013b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800138c:	f7ff ff8c 	bl	80012a8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b0a      	cmp	r3, #10
 8001398:	d90b      	bls.n	80013b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2205      	movs	r2, #5
 80013aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e09f      	b.n	80014f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e5      	bne.n	800138c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7e1b      	ldrb	r3, [r3, #24]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d108      	bne.n	80013da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e007      	b.n	80013ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7e5b      	ldrb	r3, [r3, #25]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d108      	bne.n	8001404 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e007      	b.n	8001414 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001412:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e9b      	ldrb	r3, [r3, #26]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d108      	bne.n	800142e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e007      	b.n	800143e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0220 	bic.w	r2, r2, #32
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7edb      	ldrb	r3, [r3, #27]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d108      	bne.n	8001458 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0210 	bic.w	r2, r2, #16
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e007      	b.n	8001468 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0210 	orr.w	r2, r2, #16
 8001466:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7f1b      	ldrb	r3, [r3, #28]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d108      	bne.n	8001482 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0208 	orr.w	r2, r2, #8
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e007      	b.n	8001492 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0208 	bic.w	r2, r2, #8
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7f5b      	ldrb	r3, [r3, #29]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0204 	orr.w	r2, r2, #4
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e007      	b.n	80014bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0204 	bic.w	r2, r2, #4
 80014ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	ea42 0103 	orr.w	r1, r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001510:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001512:	7cfb      	ldrb	r3, [r7, #19]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d003      	beq.n	8001520 <HAL_CAN_ConfigFilter+0x26>
 8001518:	7cfb      	ldrb	r3, [r7, #19]
 800151a:	2b02      	cmp	r3, #2
 800151c:	f040 80aa 	bne.w	8001674 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001526:	f043 0201 	orr.w	r2, r3, #1
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2201      	movs	r2, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43db      	mvns	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d123      	bne.n	80015a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	401a      	ands	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800157c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3248      	adds	r2, #72	@ 0x48
 8001582:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001596:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001598:	6979      	ldr	r1, [r7, #20]
 800159a:	3348      	adds	r3, #72	@ 0x48
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d122      	bne.n	80015f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3248      	adds	r2, #72	@ 0x48
 80015d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e6:	6979      	ldr	r1, [r7, #20]
 80015e8:	3348      	adds	r3, #72	@ 0x48
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43db      	mvns	r3, r3
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800160a:	e007      	b.n	800161c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001636:	e007      	b.n	8001648 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001666:	f023 0201 	bic.w	r2, r3, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e006      	b.n	8001682 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d12e      	bne.n	80016fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fdf6 	bl	80012a8 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016be:	e012      	b.n	80016e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c0:	f7ff fdf2 	bl	80012a8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d90b      	bls.n	80016e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e012      	b.n	800170c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e5      	bne.n	80016c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e006      	b.n	800170c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001728:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001732:	7ffb      	ldrb	r3, [r7, #31]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d003      	beq.n	8001740 <HAL_CAN_AddTxMessage+0x2c>
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	2b02      	cmp	r3, #2
 800173c:	f040 80ad 	bne.w	800189a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10a      	bne.n	8001760 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8095 	beq.w	800188a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	0e1b      	lsrs	r3, r3, #24
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800176a:	2201      	movs	r2, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10d      	bne.n	8001798 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	6809      	ldr	r1, [r1, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3318      	adds	r3, #24
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	440b      	add	r3, r1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e00f      	b.n	80017b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3318      	adds	r3, #24
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	440b      	add	r3, r1
 80017b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3318      	adds	r3, #24
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	440b      	add	r3, r1
 80017c8:	3304      	adds	r3, #4
 80017ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	7d1b      	ldrb	r3, [r3, #20]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d111      	bne.n	80017f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3318      	adds	r3, #24
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	3304      	adds	r3, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6811      	ldr	r1, [r2, #0]
 80017e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3318      	adds	r3, #24
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	440b      	add	r3, r1
 80017f4:	3304      	adds	r3, #4
 80017f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3307      	adds	r3, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	061a      	lsls	r2, r3, #24
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3306      	adds	r3, #6
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3305      	adds	r3, #5
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	4313      	orrs	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	3204      	adds	r2, #4
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	4610      	mov	r0, r2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	6811      	ldr	r1, [r2, #0]
 8001820:	ea43 0200 	orr.w	r2, r3, r0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	440b      	add	r3, r1
 800182a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800182e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3303      	adds	r3, #3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	061a      	lsls	r2, r3, #24
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3302      	adds	r3, #2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	041b      	lsls	r3, r3, #16
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	4313      	orrs	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	4610      	mov	r0, r2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	6811      	ldr	r1, [r2, #0]
 8001856:	ea43 0200 	orr.w	r2, r3, r0
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	440b      	add	r3, r1
 8001860:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001864:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3318      	adds	r3, #24
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6811      	ldr	r1, [r2, #0]
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3318      	adds	r3, #24
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	440b      	add	r3, r1
 8001884:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e00e      	b.n	80018a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e006      	b.n	80018a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3724      	adds	r7, #36	@ 0x24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018b2:	b480      	push	{r7}
 80018b4:	b087      	sub	sp, #28
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d003      	beq.n	80018d6 <HAL_CAN_GetRxMessage+0x24>
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 8103 	bne.w	8001adc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10e      	bne.n	80018fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d116      	bne.n	8001918 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0f7      	b.n	8001aea <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0e8      	b.n	8001aea <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	331b      	adds	r3, #27
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0204 	and.w	r2, r3, #4
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	331b      	adds	r3, #27
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0d5b      	lsrs	r3, r3, #21
 8001946:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e00b      	b.n	8001968 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	331b      	adds	r3, #27
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	08db      	lsrs	r3, r3, #3
 8001960:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	331b      	adds	r3, #27
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4413      	add	r3, r2
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0202 	and.w	r2, r3, #2
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	331b      	adds	r3, #27
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	4413      	add	r3, r2
 800198a:	3304      	adds	r3, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2208      	movs	r2, #8
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	e00b      	b.n	80019b6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	331b      	adds	r3, #27
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	3304      	adds	r3, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 020f 	and.w	r2, r3, #15
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	331b      	adds	r3, #27
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	3304      	adds	r3, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	331b      	adds	r3, #27
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4413      	add	r3, r2
 80019da:	3304      	adds	r3, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0a1a      	lsrs	r2, r3, #8
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0c1a      	lsrs	r2, r3, #16
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0e1a      	lsrs	r2, r3, #24
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	3303      	adds	r3, #3
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0a1a      	lsrs	r2, r3, #8
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	3305      	adds	r3, #5
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0c1a      	lsrs	r2, r3, #16
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	3306      	adds	r3, #6
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0e1a      	lsrs	r2, r3, #24
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	3307      	adds	r3, #7
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0220 	orr.w	r2, r2, #32
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0220 	orr.w	r2, r2, #32
 8001ad6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e006      	b.n	8001aea <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
  }
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b04:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d002      	beq.n	8001b12 <HAL_CAN_ActivateNotification+0x1e>
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d109      	bne.n	8001b26 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6959      	ldr	r1, [r3, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e006      	b.n	8001b34 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
  }
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b08a      	sub	sp, #40	@ 0x28
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d07c      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d023      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f983 	bl	8001eac <HAL_CAN_TxMailbox0CompleteCallback>
 8001ba6:	e016      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bba:	e00c      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bce:	e002      	b.n	8001bd6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f986 	bl	8001ee2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d024      	beq.n	8001c2a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001be8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f962 	bl	8001ebe <HAL_CAN_TxMailbox1CompleteCallback>
 8001bfa:	e016      	b.n	8001c2a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0e:	e00c      	b.n	8001c2a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c22:	e002      	b.n	8001c2a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f965 	bl	8001ef4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d024      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f941 	bl	8001ed0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c4e:	e016      	b.n	8001c7e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c62:	e00c      	b.n	8001c7e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c76:	e002      	b.n	8001c7e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f944 	bl	8001f06 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00c      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2208      	movs	r2, #8
 8001cbc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f92a 	bl	8001f18 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7fe fe8d 	bl	80009fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2210      	movs	r2, #16
 8001d04:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2208      	movs	r2, #8
 8001d20:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f90a 	bl	8001f3c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f8f2 	bl	8001f2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00b      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2210      	movs	r2, #16
 8001d60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8f3 	bl	8001f4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2208      	movs	r2, #8
 8001d82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8eb 	bl	8001f60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d07b      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d072      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d043      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d03e      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e0c:	2b60      	cmp	r3, #96	@ 0x60
 8001e0e:	d02b      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x32a>
 8001e10:	2b60      	cmp	r3, #96	@ 0x60
 8001e12:	d82e      	bhi.n	8001e72 <HAL_CAN_IRQHandler+0x334>
 8001e14:	2b50      	cmp	r3, #80	@ 0x50
 8001e16:	d022      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x320>
 8001e18:	2b50      	cmp	r3, #80	@ 0x50
 8001e1a:	d82a      	bhi.n	8001e72 <HAL_CAN_IRQHandler+0x334>
 8001e1c:	2b40      	cmp	r3, #64	@ 0x40
 8001e1e:	d019      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x316>
 8001e20:	2b40      	cmp	r3, #64	@ 0x40
 8001e22:	d826      	bhi.n	8001e72 <HAL_CAN_IRQHandler+0x334>
 8001e24:	2b30      	cmp	r3, #48	@ 0x30
 8001e26:	d010      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x30c>
 8001e28:	2b30      	cmp	r3, #48	@ 0x30
 8001e2a:	d822      	bhi.n	8001e72 <HAL_CAN_IRQHandler+0x334>
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	d002      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x2f8>
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d005      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e34:	e01d      	b.n	8001e72 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e3e:	e019      	b.n	8001e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	f043 0310 	orr.w	r3, r3, #16
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e48:	e014      	b.n	8001e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e52:	e00f      	b.n	8001e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e5c:	e00a      	b.n	8001e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e66:	e005      	b.n	8001e74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e70:	e000      	b.n	8001e74 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e72:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e82:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f867 	bl	8001f72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	@ 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4906      	ldr	r1, [pc, #24]	@ (800201c <__NVIC_EnableIRQ+0x34>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	@ (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	@ (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	@ 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	@ 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff90 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff2d 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff42 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff90 	bl	8002074 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5f 	bl	8002020 <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff35 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b08b      	sub	sp, #44	@ 0x2c
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b2:	e169      	b.n	8002488 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b4:	2201      	movs	r2, #1
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f040 8158 	bne.w	8002482 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4a9a      	ldr	r2, [pc, #616]	@ (8002440 <HAL_GPIO_Init+0x2a0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d05e      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 80021dc:	4a98      	ldr	r2, [pc, #608]	@ (8002440 <HAL_GPIO_Init+0x2a0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d875      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 80021e2:	4a98      	ldr	r2, [pc, #608]	@ (8002444 <HAL_GPIO_Init+0x2a4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d058      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 80021e8:	4a96      	ldr	r2, [pc, #600]	@ (8002444 <HAL_GPIO_Init+0x2a4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d86f      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 80021ee:	4a96      	ldr	r2, [pc, #600]	@ (8002448 <HAL_GPIO_Init+0x2a8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d052      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 80021f4:	4a94      	ldr	r2, [pc, #592]	@ (8002448 <HAL_GPIO_Init+0x2a8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d869      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 80021fa:	4a94      	ldr	r2, [pc, #592]	@ (800244c <HAL_GPIO_Init+0x2ac>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d04c      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 8002200:	4a92      	ldr	r2, [pc, #584]	@ (800244c <HAL_GPIO_Init+0x2ac>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d863      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 8002206:	4a92      	ldr	r2, [pc, #584]	@ (8002450 <HAL_GPIO_Init+0x2b0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d046      	beq.n	800229a <HAL_GPIO_Init+0xfa>
 800220c:	4a90      	ldr	r2, [pc, #576]	@ (8002450 <HAL_GPIO_Init+0x2b0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d85d      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 8002212:	2b12      	cmp	r3, #18
 8002214:	d82a      	bhi.n	800226c <HAL_GPIO_Init+0xcc>
 8002216:	2b12      	cmp	r3, #18
 8002218:	d859      	bhi.n	80022ce <HAL_GPIO_Init+0x12e>
 800221a:	a201      	add	r2, pc, #4	@ (adr r2, 8002220 <HAL_GPIO_Init+0x80>)
 800221c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002220:	0800229b 	.word	0x0800229b
 8002224:	08002275 	.word	0x08002275
 8002228:	08002287 	.word	0x08002287
 800222c:	080022c9 	.word	0x080022c9
 8002230:	080022cf 	.word	0x080022cf
 8002234:	080022cf 	.word	0x080022cf
 8002238:	080022cf 	.word	0x080022cf
 800223c:	080022cf 	.word	0x080022cf
 8002240:	080022cf 	.word	0x080022cf
 8002244:	080022cf 	.word	0x080022cf
 8002248:	080022cf 	.word	0x080022cf
 800224c:	080022cf 	.word	0x080022cf
 8002250:	080022cf 	.word	0x080022cf
 8002254:	080022cf 	.word	0x080022cf
 8002258:	080022cf 	.word	0x080022cf
 800225c:	080022cf 	.word	0x080022cf
 8002260:	080022cf 	.word	0x080022cf
 8002264:	0800227d 	.word	0x0800227d
 8002268:	08002291 	.word	0x08002291
 800226c:	4a79      	ldr	r2, [pc, #484]	@ (8002454 <HAL_GPIO_Init+0x2b4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002272:	e02c      	b.n	80022ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	623b      	str	r3, [r7, #32]
          break;
 800227a:	e029      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	3304      	adds	r3, #4
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e024      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	3308      	adds	r3, #8
 800228c:	623b      	str	r3, [r7, #32]
          break;
 800228e:	e01f      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	330c      	adds	r3, #12
 8002296:	623b      	str	r3, [r7, #32]
          break;
 8002298:	e01a      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022a2:	2304      	movs	r3, #4
 80022a4:	623b      	str	r3, [r7, #32]
          break;
 80022a6:	e013      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b0:	2308      	movs	r3, #8
 80022b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	611a      	str	r2, [r3, #16]
          break;
 80022ba:	e009      	b.n	80022d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022bc:	2308      	movs	r3, #8
 80022be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	615a      	str	r2, [r3, #20]
          break;
 80022c6:	e003      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
          break;
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x130>
          break;
 80022ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2bff      	cmp	r3, #255	@ 0xff
 80022d4:	d801      	bhi.n	80022da <HAL_GPIO_Init+0x13a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	e001      	b.n	80022de <HAL_GPIO_Init+0x13e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2bff      	cmp	r3, #255	@ 0xff
 80022e4:	d802      	bhi.n	80022ec <HAL_GPIO_Init+0x14c>
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	e002      	b.n	80022f2 <HAL_GPIO_Init+0x152>
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	3b08      	subs	r3, #8
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	210f      	movs	r1, #15
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	401a      	ands	r2, r3
 8002304:	6a39      	ldr	r1, [r7, #32]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	431a      	orrs	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80b1 	beq.w	8002482 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002320:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b4a      	ldr	r3, [pc, #296]	@ (8002458 <HAL_GPIO_Init+0x2b8>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002338:	4a48      	ldr	r2, [pc, #288]	@ (800245c <HAL_GPIO_Init+0x2bc>)
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	3302      	adds	r3, #2
 8002340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002344:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	220f      	movs	r2, #15
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a40      	ldr	r2, [pc, #256]	@ (8002460 <HAL_GPIO_Init+0x2c0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_GPIO_Init+0x1ec>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3f      	ldr	r2, [pc, #252]	@ (8002464 <HAL_GPIO_Init+0x2c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1e8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3e      	ldr	r2, [pc, #248]	@ (8002468 <HAL_GPIO_Init+0x2c8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1e4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3d      	ldr	r2, [pc, #244]	@ (800246c <HAL_GPIO_Init+0x2cc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1e0>
 800237c:	2303      	movs	r3, #3
 800237e:	e006      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002380:	2304      	movs	r3, #4
 8002382:	e004      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002384:	2302      	movs	r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_GPIO_Init+0x1ee>
 800238c:	2300      	movs	r3, #0
 800238e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002390:	f002 0203 	and.w	r2, r2, #3
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	4093      	lsls	r3, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800239e:	492f      	ldr	r1, [pc, #188]	@ (800245c <HAL_GPIO_Init+0x2bc>)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	492c      	ldr	r1, [pc, #176]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4928      	ldr	r1, [pc, #160]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023e0:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4922      	ldr	r1, [pc, #136]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	491e      	ldr	r1, [pc, #120]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4918      	ldr	r1, [pc, #96]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4914      	ldr	r1, [pc, #80]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 8002420:	4013      	ands	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d021      	beq.n	8002474 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	490e      	ldr	r1, [pc, #56]	@ (8002470 <HAL_GPIO_Init+0x2d0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
 800243c:	e021      	b.n	8002482 <HAL_GPIO_Init+0x2e2>
 800243e:	bf00      	nop
 8002440:	10320000 	.word	0x10320000
 8002444:	10310000 	.word	0x10310000
 8002448:	10220000 	.word	0x10220000
 800244c:	10210000 	.word	0x10210000
 8002450:	10120000 	.word	0x10120000
 8002454:	10110000 	.word	0x10110000
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000
 8002460:	40010800 	.word	0x40010800
 8002464:	40010c00 	.word	0x40010c00
 8002468:	40011000 	.word	0x40011000
 800246c:	40011400 	.word	0x40011400
 8002470:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002474:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_GPIO_Init+0x304>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	43db      	mvns	r3, r3
 800247c:	4909      	ldr	r1, [pc, #36]	@ (80024a4 <HAL_GPIO_Init+0x304>)
 800247e:	4013      	ands	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	3301      	adds	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	f47f ae8e 	bne.w	80021b4 <HAL_GPIO_Init+0x14>
  }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	372c      	adds	r7, #44	@ 0x2c
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	40010400 	.word	0x40010400

080024a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c4:	e003      	b.n	80024ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	611a      	str	r2, [r3, #16]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e12b      	b.n	8002742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe fa3e 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	@ 0x24
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800252a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800253a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800253c:	f001 fbca 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8002540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4a81      	ldr	r2, [pc, #516]	@ (800274c <HAL_I2C_Init+0x274>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d807      	bhi.n	800255c <HAL_I2C_Init+0x84>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a80      	ldr	r2, [pc, #512]	@ (8002750 <HAL_I2C_Init+0x278>)
 8002550:	4293      	cmp	r3, r2
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e006      	b.n	800256a <HAL_I2C_Init+0x92>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a7d      	ldr	r2, [pc, #500]	@ (8002754 <HAL_I2C_Init+0x27c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	bf94      	ite	ls
 8002564:	2301      	movls	r3, #1
 8002566:	2300      	movhi	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0e7      	b.n	8002742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a78      	ldr	r2, [pc, #480]	@ (8002758 <HAL_I2C_Init+0x280>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a6a      	ldr	r2, [pc, #424]	@ (800274c <HAL_I2C_Init+0x274>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d802      	bhi.n	80025ac <HAL_I2C_Init+0xd4>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3301      	adds	r3, #1
 80025aa:	e009      	b.n	80025c0 <HAL_I2C_Init+0xe8>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	4a69      	ldr	r2, [pc, #420]	@ (800275c <HAL_I2C_Init+0x284>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	3301      	adds	r3, #1
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	495c      	ldr	r1, [pc, #368]	@ (800274c <HAL_I2C_Init+0x274>)
 80025dc:	428b      	cmp	r3, r1
 80025de:	d819      	bhi.n	8002614 <HAL_I2C_Init+0x13c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e59      	subs	r1, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ee:	1c59      	adds	r1, r3, #1
 80025f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025f4:	400b      	ands	r3, r1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_I2C_Init+0x138>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1e59      	subs	r1, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fbb1 f3f3 	udiv	r3, r1, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260e:	e051      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002610:	2304      	movs	r3, #4
 8002612:	e04f      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d111      	bne.n	8002640 <HAL_I2C_Init+0x168>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	440b      	add	r3, r1
 800262a:	fbb0 f3f3 	udiv	r3, r0, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e012      	b.n	8002666 <HAL_I2C_Init+0x18e>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	0099      	lsls	r1, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Init+0x196>
 800266a:	2301      	movs	r3, #1
 800266c:	e022      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10e      	bne.n	8002694 <HAL_I2C_Init+0x1bc>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e58      	subs	r0, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	440b      	add	r3, r1
 8002684:	fbb0 f3f3 	udiv	r3, r0, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002692:	e00f      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1e58      	subs	r0, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	0099      	lsls	r1, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	6809      	ldr	r1, [r1, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6911      	ldr	r1, [r2, #16]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	000186a0 	.word	0x000186a0
 8002750:	001e847f 	.word	0x001e847f
 8002754:	003d08ff 	.word	0x003d08ff
 8002758:	431bde83 	.word	0x431bde83
 800275c:	10624dd3 	.word	0x10624dd3

08002760 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	461a      	mov	r2, r3
 800276c:	460b      	mov	r3, r1
 800276e:	817b      	strh	r3, [r7, #10]
 8002770:	4613      	mov	r3, r2
 8002772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7fe fd98 	bl	80012a8 <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	f040 80e0 	bne.w	8002948 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2319      	movs	r3, #25
 800278e:	2201      	movs	r2, #1
 8002790:	4970      	ldr	r1, [pc, #448]	@ (8002954 <HAL_I2C_Master_Transmit+0x1f4>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fc9e 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
 80027a0:	e0d3      	b.n	800294a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_I2C_Master_Transmit+0x50>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e0cc      	b.n	800294a <HAL_I2C_Master_Transmit+0x1ea>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d007      	beq.n	80027d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2221      	movs	r2, #33	@ 0x21
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2210      	movs	r2, #16
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	893a      	ldrh	r2, [r7, #8]
 8002806:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4a50      	ldr	r2, [pc, #320]	@ (8002958 <HAL_I2C_Master_Transmit+0x1f8>)
 8002816:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002818:	8979      	ldrh	r1, [r7, #10]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	6a3a      	ldr	r2, [r7, #32]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fb08 	bl	8002e34 <I2C_MasterRequestWrite>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e08d      	b.n	800294a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002844:	e066      	b.n	8002914 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fd5c 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	2b04      	cmp	r3, #4
 800285c:	d107      	bne.n	800286e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06b      	b.n	800294a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d11b      	bne.n	80028e8 <HAL_I2C_Master_Transmit+0x188>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d017      	beq.n	80028e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	6a39      	ldr	r1, [r7, #32]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fd53 	bl	8003398 <I2C_WaitOnBTFFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d107      	bne.n	8002910 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e01a      	b.n	800294a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	d194      	bne.n	8002846 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	00100002 	.word	0x00100002
 8002958:	ffff0000 	.word	0xffff0000

0800295c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	@ 0x30
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	461a      	mov	r2, r3
 8002968:	460b      	mov	r3, r1
 800296a:	817b      	strh	r3, [r7, #10]
 800296c:	4613      	mov	r3, r2
 800296e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7fe fc98 	bl	80012a8 <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	f040 824b 	bne.w	8002e1e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	497f      	ldr	r1, [pc, #508]	@ (8002b90 <HAL_I2C_Master_Receive+0x234>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fb9e 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	e23e      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_I2C_Master_Receive+0x54>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e237      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d007      	beq.n	80029d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2222      	movs	r2, #34	@ 0x22
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2210      	movs	r2, #16
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a5f      	ldr	r2, [pc, #380]	@ (8002b94 <HAL_I2C_Master_Receive+0x238>)
 8002a16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa8a 	bl	8002f38 <I2C_MasterRequestRead>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e1f8      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d113      	bne.n	8002a5e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e1cc      	b.n	8002df8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d11e      	bne.n	8002aa4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a76:	b672      	cpsid	i
}
 8002a78:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa0:	b662      	cpsie	i
}
 8002aa2:	e035      	b.n	8002b10 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d11e      	bne.n	8002aea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae6:	b662      	cpsie	i
}
 8002ae8:	e012      	b.n	8002b10 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b10:	e172      	b.n	8002df8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	f200 811f 	bhi.w	8002d5a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d123      	bne.n	8002b6c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fc7d 	bl	8003428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e173      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b6a:	e145      	b.n	8002df8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d152      	bne.n	8002c1a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	4906      	ldr	r1, [pc, #24]	@ (8002b98 <HAL_I2C_Master_Receive+0x23c>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 faa8 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e148      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
 8002b8e:	bf00      	nop
 8002b90:	00100002 	.word	0x00100002
 8002b94:	ffff0000 	.word	0xffff0000
 8002b98:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9c:	b672      	cpsid	i
}
 8002b9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002be2:	b662      	cpsie	i
}
 8002be4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c18:	e0ee      	b.n	8002df8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c20:	2200      	movs	r2, #0
 8002c22:	4981      	ldr	r1, [pc, #516]	@ (8002e28 <HAL_I2C_Master_Receive+0x4cc>)
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fa55 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0f5      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c44:	b672      	cpsid	i
}
 8002c46:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e2c <HAL_I2C_Master_Receive+0x4d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	08db      	lsrs	r3, r3, #3
 8002c80:	4a6b      	ldr	r2, [pc, #428]	@ (8002e30 <HAL_I2C_Master_Receive+0x4d4>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0a1a      	lsrs	r2, r3, #8
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00da      	lsls	r2, r3, #3
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d118      	bne.n	8002cd2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc2:	b662      	cpsie	i
}
 8002cc4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0a6      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d1d9      	bne.n	8002c94 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d22:	b662      	cpsie	i
}
 8002d24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d58:	e04e      	b.n	8002df8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fb62 	bl	8003428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e058      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d124      	bne.n	8002df8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f47f ae88 	bne.w	8002b12 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3728      	adds	r7, #40	@ 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	00010004 	.word	0x00010004
 8002e2c:	20000028 	.word	0x20000028
 8002e30:	14f8b589 	.word	0x14f8b589

08002e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d006      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d003      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e5c:	d108      	bne.n	8002e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00b      	b.n	8002e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d107      	bne.n	8002e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f91d 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eae:	d103      	bne.n	8002eb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e035      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec4:	d108      	bne.n	8002ed8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e01b      	b.n	8002f10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	11db      	asrs	r3, r3, #7
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f003 0306 	and.w	r3, r3, #6
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f063 030f 	orn	r3, r3, #15
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	490e      	ldr	r1, [pc, #56]	@ (8002f30 <I2C_MasterRequestWrite+0xfc>)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f966 	bl	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e010      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4907      	ldr	r1, [pc, #28]	@ (8002f34 <I2C_MasterRequestWrite+0x100>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f956 	bl	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	00010008 	.word	0x00010008
 8002f34:	00010002 	.word	0x00010002

08002f38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d006      	beq.n	8002f72 <I2C_MasterRequestRead+0x3a>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d003      	beq.n	8002f72 <I2C_MasterRequestRead+0x3a>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f70:	d108      	bne.n	8002f84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e00b      	b.n	8002f9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	2b11      	cmp	r3, #17
 8002f8a:	d107      	bne.n	8002f9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f893 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fc2:	d103      	bne.n	8002fcc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e079      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fd8:	d108      	bne.n	8002fec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	e05f      	b.n	80030ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fec:	897b      	ldrh	r3, [r7, #10]
 8002fee:	11db      	asrs	r3, r3, #7
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 0306 	and.w	r3, r3, #6
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f063 030f 	orn	r3, r3, #15
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4930      	ldr	r1, [pc, #192]	@ (80030cc <I2C_MasterRequestRead+0x194>)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f8dc 	bl	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e054      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4929      	ldr	r1, [pc, #164]	@ (80030d0 <I2C_MasterRequestRead+0x198>)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f8cc 	bl	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e044      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800305e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f831 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003086:	d103      	bne.n	8003090 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e017      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003094:	897b      	ldrh	r3, [r7, #10]
 8003096:	11db      	asrs	r3, r3, #7
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0306 	and.w	r3, r3, #6
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f063 030e 	orn	r3, r3, #14
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4907      	ldr	r1, [pc, #28]	@ (80030d0 <I2C_MasterRequestRead+0x198>)
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f888 	bl	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	00010008 	.word	0x00010008
 80030d0:	00010002 	.word	0x00010002

080030d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e4:	e048      	b.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d044      	beq.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe f8db 	bl	80012a8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d139      	bne.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10d      	bne.n	800312a <I2C_WaitOnFlagUntilTimeout+0x56>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	43da      	mvns	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4013      	ands	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	e00c      	b.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x70>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	43da      	mvns	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	429a      	cmp	r2, r3
 8003148:	d116      	bne.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e023      	b.n	80031c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	0c1b      	lsrs	r3, r3, #16
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d10d      	bne.n	800319e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	43da      	mvns	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	e00c      	b.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d093      	beq.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d6:	e071      	b.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e6:	d123      	bne.n	8003230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f043 0204 	orr.w	r2, r3, #4
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e067      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	d041      	beq.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7fe f836 	bl	80012a8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d136      	bne.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	0c1b      	lsrs	r3, r3, #16
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d10c      	bne.n	8003272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4013      	ands	r3, r2
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e00b      	b.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	43da      	mvns	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e021      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10c      	bne.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	43da      	mvns	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4013      	ands	r3, r2
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e00b      	b.n	80032f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4013      	ands	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f af6d 	bne.w	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003314:	e034      	b.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8e3 	bl	80034e2 <I2C_IsAcknowledgeFailed>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e034      	b.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d028      	beq.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fd ffbb 	bl	80012a8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11d      	bne.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334e:	2b80      	cmp	r3, #128	@ 0x80
 8003350:	d016      	beq.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e007      	b.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338a:	2b80      	cmp	r3, #128	@ 0x80
 800338c:	d1c3      	bne.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a4:	e034      	b.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f89b 	bl	80034e2 <I2C_IsAcknowledgeFailed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e034      	b.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d028      	beq.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fd ff73 	bl	80012a8 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11d      	bne.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d016      	beq.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b04      	cmp	r3, #4
 800341c:	d1c3      	bne.n	80033a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003434:	e049      	b.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b10      	cmp	r3, #16
 8003442:	d119      	bne.n	8003478 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e030      	b.n	80034da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003478:	f7fd ff16 	bl	80012a8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11d      	bne.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b40      	cmp	r3, #64	@ 0x40
 800349a:	d016      	beq.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e007      	b.n	80034da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	d1ae      	bne.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f8:	d11b      	bne.n	8003532 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003502:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f043 0204 	orr.w	r2, r3, #4
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
	...

08003540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e272      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8087 	beq.w	800366e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003560:	4b92      	ldr	r3, [pc, #584]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b04      	cmp	r3, #4
 800356a:	d00c      	beq.n	8003586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800356c:	4b8f      	ldr	r3, [pc, #572]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d112      	bne.n	800359e <HAL_RCC_OscConfig+0x5e>
 8003578:	4b8c      	ldr	r3, [pc, #560]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003584:	d10b      	bne.n	800359e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003586:	4b89      	ldr	r3, [pc, #548]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d06c      	beq.n	800366c <HAL_RCC_OscConfig+0x12c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d168      	bne.n	800366c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e24c      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a6:	d106      	bne.n	80035b6 <HAL_RCC_OscConfig+0x76>
 80035a8:	4b80      	ldr	r3, [pc, #512]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a7f      	ldr	r2, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	e02e      	b.n	8003614 <HAL_RCC_OscConfig+0xd4>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCC_OscConfig+0x98>
 80035be:	4b7b      	ldr	r3, [pc, #492]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7a      	ldr	r2, [pc, #488]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b78      	ldr	r3, [pc, #480]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a77      	ldr	r2, [pc, #476]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e01d      	b.n	8003614 <HAL_RCC_OscConfig+0xd4>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0xbc>
 80035e2:	4b72      	ldr	r3, [pc, #456]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a71      	ldr	r2, [pc, #452]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b6f      	ldr	r3, [pc, #444]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e00b      	b.n	8003614 <HAL_RCC_OscConfig+0xd4>
 80035fc:	4b6b      	ldr	r3, [pc, #428]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a6a      	ldr	r2, [pc, #424]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b68      	ldr	r3, [pc, #416]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a67      	ldr	r2, [pc, #412]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 800360e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fd fe44 	bl	80012a8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fd fe40 	bl	80012a8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	@ 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e200      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	4b5d      	ldr	r3, [pc, #372]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0xe4>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fd fe30 	bl	80012a8 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7fd fe2c 	bl	80012a8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	@ 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e1ec      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365e:	4b53      	ldr	r3, [pc, #332]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x10c>
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d063      	beq.n	8003742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367a:	4b4c      	ldr	r3, [pc, #304]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003686:	4b49      	ldr	r3, [pc, #292]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b08      	cmp	r3, #8
 8003690:	d11c      	bne.n	80036cc <HAL_RCC_OscConfig+0x18c>
 8003692:	4b46      	ldr	r3, [pc, #280]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d116      	bne.n	80036cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369e:	4b43      	ldr	r3, [pc, #268]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_RCC_OscConfig+0x176>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e1c0      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b6:	4b3d      	ldr	r3, [pc, #244]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4939      	ldr	r1, [pc, #228]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ca:	e03a      	b.n	8003742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d4:	4b36      	ldr	r3, [pc, #216]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fd fde5 	bl	80012a8 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e2:	f7fd fde1 	bl	80012a8 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e1a1      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f4:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003700:	4b2a      	ldr	r3, [pc, #168]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4927      	ldr	r1, [pc, #156]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]
 8003714:	e015      	b.n	8003742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003716:	4b26      	ldr	r3, [pc, #152]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fd fdc4 	bl	80012a8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003724:	f7fd fdc0 	bl	80012a8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e180      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003736:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d03a      	beq.n	80037c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d019      	beq.n	800378a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003756:	4b17      	ldr	r3, [pc, #92]	@ (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375c:	f7fd fda4 	bl	80012a8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003764:	f7fd fda0 	bl	80012a8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e160      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003776:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <HAL_RCC_OscConfig+0x26c>)
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003782:	2001      	movs	r0, #1
 8003784:	f000 face 	bl	8003d24 <RCC_Delay>
 8003788:	e01c      	b.n	80037c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378a:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <HAL_RCC_OscConfig+0x274>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003790:	f7fd fd8a 	bl	80012a8 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003796:	e00f      	b.n	80037b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003798:	f7fd fd86 	bl	80012a8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d908      	bls.n	80037b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e146      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	42420000 	.word	0x42420000
 80037b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	4b92      	ldr	r3, [pc, #584]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e9      	bne.n	8003798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a6 	beq.w	800391e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10d      	bne.n	80037fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e2:	4b88      	ldr	r3, [pc, #544]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	4a87      	ldr	r2, [pc, #540]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ec:	61d3      	str	r3, [r2, #28]
 80037ee:	4b85      	ldr	r3, [pc, #532]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fe:	4b82      	ldr	r3, [pc, #520]	@ (8003a08 <HAL_RCC_OscConfig+0x4c8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d118      	bne.n	800383c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a08 <HAL_RCC_OscConfig+0x4c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a08 <HAL_RCC_OscConfig+0x4c8>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003816:	f7fd fd47 	bl	80012a8 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381e:	f7fd fd43 	bl	80012a8 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b64      	cmp	r3, #100	@ 0x64
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e103      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	4b75      	ldr	r3, [pc, #468]	@ (8003a08 <HAL_RCC_OscConfig+0x4c8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x312>
 8003844:	4b6f      	ldr	r3, [pc, #444]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4a6e      	ldr	r2, [pc, #440]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6213      	str	r3, [r2, #32]
 8003850:	e02d      	b.n	80038ae <HAL_RCC_OscConfig+0x36e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x334>
 800385a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4a69      	ldr	r2, [pc, #420]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	6213      	str	r3, [r2, #32]
 8003866:	4b67      	ldr	r3, [pc, #412]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4a66      	ldr	r2, [pc, #408]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	f023 0304 	bic.w	r3, r3, #4
 8003870:	6213      	str	r3, [r2, #32]
 8003872:	e01c      	b.n	80038ae <HAL_RCC_OscConfig+0x36e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b05      	cmp	r3, #5
 800387a:	d10c      	bne.n	8003896 <HAL_RCC_OscConfig+0x356>
 800387c:	4b61      	ldr	r3, [pc, #388]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4a60      	ldr	r2, [pc, #384]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	6213      	str	r3, [r2, #32]
 8003888:	4b5e      	ldr	r3, [pc, #376]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	4a5d      	ldr	r2, [pc, #372]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6213      	str	r3, [r2, #32]
 8003894:	e00b      	b.n	80038ae <HAL_RCC_OscConfig+0x36e>
 8003896:	4b5b      	ldr	r3, [pc, #364]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a5a      	ldr	r2, [pc, #360]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6213      	str	r3, [r2, #32]
 80038a2:	4b58      	ldr	r3, [pc, #352]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4a57      	ldr	r2, [pc, #348]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d015      	beq.n	80038e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7fd fcf7 	bl	80012a8 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fd fcf3 	bl	80012a8 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0b1      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ee      	beq.n	80038be <HAL_RCC_OscConfig+0x37e>
 80038e0:	e014      	b.n	800390c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e2:	f7fd fce1 	bl	80012a8 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	e00a      	b.n	8003900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fd fcdd 	bl	80012a8 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e09b      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003900:	4b40      	ldr	r3, [pc, #256]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ee      	bne.n	80038ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d105      	bne.n	800391e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b3c      	ldr	r3, [pc, #240]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	4a3b      	ldr	r2, [pc, #236]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8087 	beq.w	8003a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003928:	4b36      	ldr	r3, [pc, #216]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d061      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d146      	bne.n	80039ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b33      	ldr	r3, [pc, #204]	@ (8003a0c <HAL_RCC_OscConfig+0x4cc>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd fcb1 	bl	80012a8 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394a:	f7fd fcad 	bl	80012a8 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e06d      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395c:	4b29      	ldr	r3, [pc, #164]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f0      	bne.n	800394a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003970:	d108      	bne.n	8003984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003972:	4b24      	ldr	r3, [pc, #144]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	4921      	ldr	r1, [pc, #132]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003984:	4b1f      	ldr	r3, [pc, #124]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a19      	ldr	r1, [r3, #32]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	430b      	orrs	r3, r1
 8003996:	491b      	ldr	r1, [pc, #108]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800399c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <HAL_RCC_OscConfig+0x4cc>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fd fc81 	bl	80012a8 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fd fc7d 	bl	80012a8 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e03d      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039bc:	4b11      	ldr	r3, [pc, #68]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x46a>
 80039c8:	e035      	b.n	8003a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ca:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <HAL_RCC_OscConfig+0x4cc>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fd fc6a 	bl	80012a8 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fd fc66 	bl	80012a8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e026      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x498>
 80039f6:	e01e      	b.n	8003a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e019      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40007000 	.word	0x40007000
 8003a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_OscConfig+0x500>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000

08003a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0d0      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b6a      	ldr	r3, [pc, #424]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d910      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b67      	ldr	r3, [pc, #412]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	4965      	ldr	r1, [pc, #404]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b63      	ldr	r3, [pc, #396]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a58      	ldr	r2, [pc, #352]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab8:	4b53      	ldr	r3, [pc, #332]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a52      	ldr	r2, [pc, #328]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b50      	ldr	r3, [pc, #320]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	494d      	ldr	r1, [pc, #308]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d040      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b47      	ldr	r3, [pc, #284]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d115      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b02:	4b41      	ldr	r3, [pc, #260]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e073      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	4b3d      	ldr	r3, [pc, #244]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e06b      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b22:	4b39      	ldr	r3, [pc, #228]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4936      	ldr	r1, [pc, #216]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fd fbb8 	bl	80012a8 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fd fbb4 	bl	80012a8 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e053      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	4b2d      	ldr	r3, [pc, #180]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 020c 	and.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1eb      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b27      	ldr	r3, [pc, #156]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d210      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b24      	ldr	r3, [pc, #144]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 0207 	bic.w	r2, r3, #7
 8003b7a:	4922      	ldr	r1, [pc, #136]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e032      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4916      	ldr	r1, [pc, #88]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bbe:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	490e      	ldr	r1, [pc, #56]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bd2:	f000 f821 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	490a      	ldr	r1, [pc, #40]	@ (8003c0c <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a09      	ldr	r2, [pc, #36]	@ (8003c10 <HAL_RCC_ClockConfig+0x1cc>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bee:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <HAL_RCC_ClockConfig+0x1d0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd fb16 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08004de4 	.word	0x08004de4
 8003c10:	20000028 	.word	0x20000028
 8003c14:	2000002c 	.word	0x2000002c

08003c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c32:	4b1e      	ldr	r3, [pc, #120]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x94>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x30>
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x36>
 8003c46:	e027      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c4a:	613b      	str	r3, [r7, #16]
      break;
 8003c4c:	e027      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	0c9b      	lsrs	r3, r3, #18
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	4a17      	ldr	r2, [pc, #92]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c58:	5cd3      	ldrb	r3, [r2, r3]
 8003c5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d010      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c66:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x94>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	0c5b      	lsrs	r3, r3, #17
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	4a11      	ldr	r2, [pc, #68]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c72:	5cd3      	ldrb	r3, [r2, r3]
 8003c74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c7a:	fb03 f202 	mul.w	r2, r3, r2
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e004      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	613b      	str	r3, [r7, #16]
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c9a:	613b      	str	r3, [r7, #16]
      break;
 8003c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9e:	693b      	ldr	r3, [r7, #16]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	007a1200 	.word	0x007a1200
 8003cb4:	08004dfc 	.word	0x08004dfc
 8003cb8:	08004e0c 	.word	0x08004e0c
 8003cbc:	003d0900 	.word	0x003d0900

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b02      	ldr	r3, [pc, #8]	@ (8003cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	20000028 	.word	0x20000028

08003cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	f7ff fff2 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4903      	ldr	r1, [pc, #12]	@ (8003cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08004df4 	.word	0x08004df4

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d00:	f7ff ffde 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	0adb      	lsrs	r3, r3, #11
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	08004df4 	.word	0x08004df4

08003d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <RCC_Delay+0x34>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0a      	ldr	r2, [pc, #40]	@ (8003d5c <RCC_Delay+0x38>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0a5b      	lsrs	r3, r3, #9
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d40:	bf00      	nop
  }
  while (Delay --);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	60fa      	str	r2, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f9      	bne.n	8003d40 <RCC_Delay+0x1c>
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	20000028 	.word	0x20000028
 8003d5c:	10624dd3 	.word	0x10624dd3

08003d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d020      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01b      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0202 	mvn.w	r2, #2
 8003d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f8da 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8cd 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8dc 	bl	8003f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d020      	beq.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0204 	mvn.w	r2, #4
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8b4 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8a7 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8b6 	bl	8003f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d020      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01b      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0208 	mvn.w	r2, #8
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2204      	movs	r2, #4
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f88e 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f881 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f890 	bl	8003f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d020      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01b      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0210 	mvn.w	r2, #16
 8003e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f868 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003e94:	e005      	b.n	8003ea2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f85b 	bl	8003f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f86a 	bl	8003f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f83a 	bl	8003f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f85e 	bl	8003fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00c      	beq.n	8003f14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f83a 	bl	8003f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0220 	mvn.w	r2, #32
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f831 	bl	8003f9a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e042      	b.n	8004056 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fc ff7d 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2224      	movs	r2, #36	@ 0x24
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004000:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f972 	bl	80042ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004016:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004026:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004036:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08a      	sub	sp, #40	@ 0x28
 8004062:	af02      	add	r7, sp, #8
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	d175      	bne.n	800416a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_UART_Transmit+0x2c>
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e06e      	b.n	800416c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2221      	movs	r2, #33	@ 0x21
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800409c:	f7fd f904 	bl	80012a8 <HAL_GetTick>
 80040a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b6:	d108      	bne.n	80040ca <HAL_UART_Transmit+0x6c>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	e003      	b.n	80040d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040d2:	e02e      	b.n	8004132 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	2180      	movs	r1, #128	@ 0x80
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f848 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e03a      	b.n	800416c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800410a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	3302      	adds	r3, #2
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e007      	b.n	8004124 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3301      	adds	r3, #1
 8004122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1cb      	bne.n	80040d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2200      	movs	r2, #0
 8004144:	2140      	movs	r1, #64	@ 0x40
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f814 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e006      	b.n	800416c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	e000      	b.n	800416c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800416a:	2302      	movs	r3, #2
  }
}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004184:	e03b      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d037      	beq.n	80041fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418e:	f7fd f88b 	bl	80012a8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	429a      	cmp	r2, r3
 800419c:	d302      	bcc.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e03a      	b.n	800421e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d023      	beq.n	80041fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b80      	cmp	r3, #128	@ 0x80
 80041ba:	d020      	beq.n	80041fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b40      	cmp	r3, #64	@ 0x40
 80041c0:	d01d      	beq.n	80041fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d116      	bne.n	80041fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f81d 	bl	8004226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2208      	movs	r2, #8
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e00f      	b.n	800421e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4013      	ands	r3, r2
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	429a      	cmp	r2, r3
 800420c:	bf0c      	ite	eq
 800420e:	2301      	moveq	r3, #1
 8004210:	2300      	movne	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	429a      	cmp	r2, r3
 800421a:	d0b4      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004226:	b480      	push	{r7}
 8004228:	b095      	sub	sp, #84	@ 0x54
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800424e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	61fb      	str	r3, [r7, #28]
   return(result);
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3314      	adds	r3, #20
 8004280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	2b01      	cmp	r3, #1
 800429c:	d119      	bne.n	80042d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f023 0310 	bic.w	r3, r3, #16
 80042b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042be:	61ba      	str	r2, [r7, #24]
 80042c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6979      	ldr	r1, [r7, #20]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	613b      	str	r3, [r7, #16]
   return(result);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e5      	bne.n	800429e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042e0:	bf00      	nop
 80042e2:	3754      	adds	r7, #84	@ 0x54
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
	...

080042ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004326:	f023 030c 	bic.w	r3, r3, #12
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	430b      	orrs	r3, r1
 8004332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2c      	ldr	r2, [pc, #176]	@ (8004400 <UART_SetConfig+0x114>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d103      	bne.n	800435c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7ff fcd2 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	e002      	b.n	8004362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800435c:	f7ff fcba 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8004360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009a      	lsls	r2, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	4a22      	ldr	r2, [pc, #136]	@ (8004404 <UART_SetConfig+0x118>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	0119      	lsls	r1, r3, #4
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009a      	lsls	r2, r3, #2
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fbb2 f2f3 	udiv	r2, r2, r3
 8004398:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <UART_SetConfig+0x118>)
 800439a:	fba3 0302 	umull	r0, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2064      	movs	r0, #100	@ 0x64
 80043a2:	fb00 f303 	mul.w	r3, r0, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	3332      	adds	r3, #50	@ 0x32
 80043ac:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <UART_SetConfig+0x118>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043b8:	4419      	add	r1, r3
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009a      	lsls	r2, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <UART_SetConfig+0x118>)
 80043d2:	fba3 0302 	umull	r0, r3, r3, r2
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	2064      	movs	r0, #100	@ 0x64
 80043da:	fb00 f303 	mul.w	r3, r0, r3
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	3332      	adds	r3, #50	@ 0x32
 80043e4:	4a07      	ldr	r2, [pc, #28]	@ (8004404 <UART_SetConfig+0x118>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	f003 020f 	and.w	r2, r3, #15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	440a      	add	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40013800 	.word	0x40013800
 8004404:	51eb851f 	.word	0x51eb851f

08004408 <siprintf>:
 8004408:	b40e      	push	{r1, r2, r3}
 800440a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800440e:	b500      	push	{lr}
 8004410:	b09c      	sub	sp, #112	@ 0x70
 8004412:	ab1d      	add	r3, sp, #116	@ 0x74
 8004414:	9002      	str	r0, [sp, #8]
 8004416:	9006      	str	r0, [sp, #24]
 8004418:	9107      	str	r1, [sp, #28]
 800441a:	9104      	str	r1, [sp, #16]
 800441c:	4808      	ldr	r0, [pc, #32]	@ (8004440 <siprintf+0x38>)
 800441e:	4909      	ldr	r1, [pc, #36]	@ (8004444 <siprintf+0x3c>)
 8004420:	f853 2b04 	ldr.w	r2, [r3], #4
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	a902      	add	r1, sp, #8
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	f000 f9a0 	bl	8004770 <_svfiprintf_r>
 8004430:	2200      	movs	r2, #0
 8004432:	9b02      	ldr	r3, [sp, #8]
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	b01c      	add	sp, #112	@ 0x70
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr
 8004440:	20000034 	.word	0x20000034
 8004444:	ffff0208 	.word	0xffff0208

08004448 <memset>:
 8004448:	4603      	mov	r3, r0
 800444a:	4402      	add	r2, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <__errno>:
 8004458:	4b01      	ldr	r3, [pc, #4]	@ (8004460 <__errno+0x8>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000034 	.word	0x20000034

08004464 <__libc_init_array>:
 8004464:	b570      	push	{r4, r5, r6, lr}
 8004466:	2600      	movs	r6, #0
 8004468:	4d0c      	ldr	r5, [pc, #48]	@ (800449c <__libc_init_array+0x38>)
 800446a:	4c0d      	ldr	r4, [pc, #52]	@ (80044a0 <__libc_init_array+0x3c>)
 800446c:	1b64      	subs	r4, r4, r5
 800446e:	10a4      	asrs	r4, r4, #2
 8004470:	42a6      	cmp	r6, r4
 8004472:	d109      	bne.n	8004488 <__libc_init_array+0x24>
 8004474:	f000 fc78 	bl	8004d68 <_init>
 8004478:	2600      	movs	r6, #0
 800447a:	4d0a      	ldr	r5, [pc, #40]	@ (80044a4 <__libc_init_array+0x40>)
 800447c:	4c0a      	ldr	r4, [pc, #40]	@ (80044a8 <__libc_init_array+0x44>)
 800447e:	1b64      	subs	r4, r4, r5
 8004480:	10a4      	asrs	r4, r4, #2
 8004482:	42a6      	cmp	r6, r4
 8004484:	d105      	bne.n	8004492 <__libc_init_array+0x2e>
 8004486:	bd70      	pop	{r4, r5, r6, pc}
 8004488:	f855 3b04 	ldr.w	r3, [r5], #4
 800448c:	4798      	blx	r3
 800448e:	3601      	adds	r6, #1
 8004490:	e7ee      	b.n	8004470 <__libc_init_array+0xc>
 8004492:	f855 3b04 	ldr.w	r3, [r5], #4
 8004496:	4798      	blx	r3
 8004498:	3601      	adds	r6, #1
 800449a:	e7f2      	b.n	8004482 <__libc_init_array+0x1e>
 800449c:	08004e4c 	.word	0x08004e4c
 80044a0:	08004e4c 	.word	0x08004e4c
 80044a4:	08004e4c 	.word	0x08004e4c
 80044a8:	08004e50 	.word	0x08004e50

080044ac <__retarget_lock_acquire_recursive>:
 80044ac:	4770      	bx	lr

080044ae <__retarget_lock_release_recursive>:
 80044ae:	4770      	bx	lr

080044b0 <memcpy>:
 80044b0:	440a      	add	r2, r1
 80044b2:	4291      	cmp	r1, r2
 80044b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b8:	d100      	bne.n	80044bc <memcpy+0xc>
 80044ba:	4770      	bx	lr
 80044bc:	b510      	push	{r4, lr}
 80044be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c2:	4291      	cmp	r1, r2
 80044c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c8:	d1f9      	bne.n	80044be <memcpy+0xe>
 80044ca:	bd10      	pop	{r4, pc}

080044cc <_free_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4605      	mov	r5, r0
 80044d0:	2900      	cmp	r1, #0
 80044d2:	d040      	beq.n	8004556 <_free_r+0x8a>
 80044d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d8:	1f0c      	subs	r4, r1, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bfb8      	it	lt
 80044de:	18e4      	addlt	r4, r4, r3
 80044e0:	f000 f8de 	bl	80046a0 <__malloc_lock>
 80044e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004558 <_free_r+0x8c>)
 80044e6:	6813      	ldr	r3, [r2, #0]
 80044e8:	b933      	cbnz	r3, 80044f8 <_free_r+0x2c>
 80044ea:	6063      	str	r3, [r4, #4]
 80044ec:	6014      	str	r4, [r2, #0]
 80044ee:	4628      	mov	r0, r5
 80044f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044f4:	f000 b8da 	b.w	80046ac <__malloc_unlock>
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	d908      	bls.n	800450e <_free_r+0x42>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	1821      	adds	r1, r4, r0
 8004500:	428b      	cmp	r3, r1
 8004502:	bf01      	itttt	eq
 8004504:	6819      	ldreq	r1, [r3, #0]
 8004506:	685b      	ldreq	r3, [r3, #4]
 8004508:	1809      	addeq	r1, r1, r0
 800450a:	6021      	streq	r1, [r4, #0]
 800450c:	e7ed      	b.n	80044ea <_free_r+0x1e>
 800450e:	461a      	mov	r2, r3
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	b10b      	cbz	r3, 8004518 <_free_r+0x4c>
 8004514:	42a3      	cmp	r3, r4
 8004516:	d9fa      	bls.n	800450e <_free_r+0x42>
 8004518:	6811      	ldr	r1, [r2, #0]
 800451a:	1850      	adds	r0, r2, r1
 800451c:	42a0      	cmp	r0, r4
 800451e:	d10b      	bne.n	8004538 <_free_r+0x6c>
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	4401      	add	r1, r0
 8004524:	1850      	adds	r0, r2, r1
 8004526:	4283      	cmp	r3, r0
 8004528:	6011      	str	r1, [r2, #0]
 800452a:	d1e0      	bne.n	80044ee <_free_r+0x22>
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4408      	add	r0, r1
 8004532:	6010      	str	r0, [r2, #0]
 8004534:	6053      	str	r3, [r2, #4]
 8004536:	e7da      	b.n	80044ee <_free_r+0x22>
 8004538:	d902      	bls.n	8004540 <_free_r+0x74>
 800453a:	230c      	movs	r3, #12
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	e7d6      	b.n	80044ee <_free_r+0x22>
 8004540:	6820      	ldr	r0, [r4, #0]
 8004542:	1821      	adds	r1, r4, r0
 8004544:	428b      	cmp	r3, r1
 8004546:	bf01      	itttt	eq
 8004548:	6819      	ldreq	r1, [r3, #0]
 800454a:	685b      	ldreq	r3, [r3, #4]
 800454c:	1809      	addeq	r1, r1, r0
 800454e:	6021      	streq	r1, [r4, #0]
 8004550:	6063      	str	r3, [r4, #4]
 8004552:	6054      	str	r4, [r2, #4]
 8004554:	e7cb      	b.n	80044ee <_free_r+0x22>
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	200004b4 	.word	0x200004b4

0800455c <sbrk_aligned>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	4e0f      	ldr	r6, [pc, #60]	@ (800459c <sbrk_aligned+0x40>)
 8004560:	460c      	mov	r4, r1
 8004562:	6831      	ldr	r1, [r6, #0]
 8004564:	4605      	mov	r5, r0
 8004566:	b911      	cbnz	r1, 800456e <sbrk_aligned+0x12>
 8004568:	f000 fbaa 	bl	8004cc0 <_sbrk_r>
 800456c:	6030      	str	r0, [r6, #0]
 800456e:	4621      	mov	r1, r4
 8004570:	4628      	mov	r0, r5
 8004572:	f000 fba5 	bl	8004cc0 <_sbrk_r>
 8004576:	1c43      	adds	r3, r0, #1
 8004578:	d103      	bne.n	8004582 <sbrk_aligned+0x26>
 800457a:	f04f 34ff 	mov.w	r4, #4294967295
 800457e:	4620      	mov	r0, r4
 8004580:	bd70      	pop	{r4, r5, r6, pc}
 8004582:	1cc4      	adds	r4, r0, #3
 8004584:	f024 0403 	bic.w	r4, r4, #3
 8004588:	42a0      	cmp	r0, r4
 800458a:	d0f8      	beq.n	800457e <sbrk_aligned+0x22>
 800458c:	1a21      	subs	r1, r4, r0
 800458e:	4628      	mov	r0, r5
 8004590:	f000 fb96 	bl	8004cc0 <_sbrk_r>
 8004594:	3001      	adds	r0, #1
 8004596:	d1f2      	bne.n	800457e <sbrk_aligned+0x22>
 8004598:	e7ef      	b.n	800457a <sbrk_aligned+0x1e>
 800459a:	bf00      	nop
 800459c:	200004b0 	.word	0x200004b0

080045a0 <_malloc_r>:
 80045a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a4:	1ccd      	adds	r5, r1, #3
 80045a6:	f025 0503 	bic.w	r5, r5, #3
 80045aa:	3508      	adds	r5, #8
 80045ac:	2d0c      	cmp	r5, #12
 80045ae:	bf38      	it	cc
 80045b0:	250c      	movcc	r5, #12
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	4606      	mov	r6, r0
 80045b6:	db01      	blt.n	80045bc <_malloc_r+0x1c>
 80045b8:	42a9      	cmp	r1, r5
 80045ba:	d904      	bls.n	80045c6 <_malloc_r+0x26>
 80045bc:	230c      	movs	r3, #12
 80045be:	6033      	str	r3, [r6, #0]
 80045c0:	2000      	movs	r0, #0
 80045c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800469c <_malloc_r+0xfc>
 80045ca:	f000 f869 	bl	80046a0 <__malloc_lock>
 80045ce:	f8d8 3000 	ldr.w	r3, [r8]
 80045d2:	461c      	mov	r4, r3
 80045d4:	bb44      	cbnz	r4, 8004628 <_malloc_r+0x88>
 80045d6:	4629      	mov	r1, r5
 80045d8:	4630      	mov	r0, r6
 80045da:	f7ff ffbf 	bl	800455c <sbrk_aligned>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	4604      	mov	r4, r0
 80045e2:	d158      	bne.n	8004696 <_malloc_r+0xf6>
 80045e4:	f8d8 4000 	ldr.w	r4, [r8]
 80045e8:	4627      	mov	r7, r4
 80045ea:	2f00      	cmp	r7, #0
 80045ec:	d143      	bne.n	8004676 <_malloc_r+0xd6>
 80045ee:	2c00      	cmp	r4, #0
 80045f0:	d04b      	beq.n	800468a <_malloc_r+0xea>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	4639      	mov	r1, r7
 80045f6:	4630      	mov	r0, r6
 80045f8:	eb04 0903 	add.w	r9, r4, r3
 80045fc:	f000 fb60 	bl	8004cc0 <_sbrk_r>
 8004600:	4581      	cmp	r9, r0
 8004602:	d142      	bne.n	800468a <_malloc_r+0xea>
 8004604:	6821      	ldr	r1, [r4, #0]
 8004606:	4630      	mov	r0, r6
 8004608:	1a6d      	subs	r5, r5, r1
 800460a:	4629      	mov	r1, r5
 800460c:	f7ff ffa6 	bl	800455c <sbrk_aligned>
 8004610:	3001      	adds	r0, #1
 8004612:	d03a      	beq.n	800468a <_malloc_r+0xea>
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	442b      	add	r3, r5
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	f8d8 3000 	ldr.w	r3, [r8]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	bb62      	cbnz	r2, 800467c <_malloc_r+0xdc>
 8004622:	f8c8 7000 	str.w	r7, [r8]
 8004626:	e00f      	b.n	8004648 <_malloc_r+0xa8>
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	1b52      	subs	r2, r2, r5
 800462c:	d420      	bmi.n	8004670 <_malloc_r+0xd0>
 800462e:	2a0b      	cmp	r2, #11
 8004630:	d917      	bls.n	8004662 <_malloc_r+0xc2>
 8004632:	1961      	adds	r1, r4, r5
 8004634:	42a3      	cmp	r3, r4
 8004636:	6025      	str	r5, [r4, #0]
 8004638:	bf18      	it	ne
 800463a:	6059      	strne	r1, [r3, #4]
 800463c:	6863      	ldr	r3, [r4, #4]
 800463e:	bf08      	it	eq
 8004640:	f8c8 1000 	streq.w	r1, [r8]
 8004644:	5162      	str	r2, [r4, r5]
 8004646:	604b      	str	r3, [r1, #4]
 8004648:	4630      	mov	r0, r6
 800464a:	f000 f82f 	bl	80046ac <__malloc_unlock>
 800464e:	f104 000b 	add.w	r0, r4, #11
 8004652:	1d23      	adds	r3, r4, #4
 8004654:	f020 0007 	bic.w	r0, r0, #7
 8004658:	1ac2      	subs	r2, r0, r3
 800465a:	bf1c      	itt	ne
 800465c:	1a1b      	subne	r3, r3, r0
 800465e:	50a3      	strne	r3, [r4, r2]
 8004660:	e7af      	b.n	80045c2 <_malloc_r+0x22>
 8004662:	6862      	ldr	r2, [r4, #4]
 8004664:	42a3      	cmp	r3, r4
 8004666:	bf0c      	ite	eq
 8004668:	f8c8 2000 	streq.w	r2, [r8]
 800466c:	605a      	strne	r2, [r3, #4]
 800466e:	e7eb      	b.n	8004648 <_malloc_r+0xa8>
 8004670:	4623      	mov	r3, r4
 8004672:	6864      	ldr	r4, [r4, #4]
 8004674:	e7ae      	b.n	80045d4 <_malloc_r+0x34>
 8004676:	463c      	mov	r4, r7
 8004678:	687f      	ldr	r7, [r7, #4]
 800467a:	e7b6      	b.n	80045ea <_malloc_r+0x4a>
 800467c:	461a      	mov	r2, r3
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	42a3      	cmp	r3, r4
 8004682:	d1fb      	bne.n	800467c <_malloc_r+0xdc>
 8004684:	2300      	movs	r3, #0
 8004686:	6053      	str	r3, [r2, #4]
 8004688:	e7de      	b.n	8004648 <_malloc_r+0xa8>
 800468a:	230c      	movs	r3, #12
 800468c:	4630      	mov	r0, r6
 800468e:	6033      	str	r3, [r6, #0]
 8004690:	f000 f80c 	bl	80046ac <__malloc_unlock>
 8004694:	e794      	b.n	80045c0 <_malloc_r+0x20>
 8004696:	6005      	str	r5, [r0, #0]
 8004698:	e7d6      	b.n	8004648 <_malloc_r+0xa8>
 800469a:	bf00      	nop
 800469c:	200004b4 	.word	0x200004b4

080046a0 <__malloc_lock>:
 80046a0:	4801      	ldr	r0, [pc, #4]	@ (80046a8 <__malloc_lock+0x8>)
 80046a2:	f7ff bf03 	b.w	80044ac <__retarget_lock_acquire_recursive>
 80046a6:	bf00      	nop
 80046a8:	200004ac 	.word	0x200004ac

080046ac <__malloc_unlock>:
 80046ac:	4801      	ldr	r0, [pc, #4]	@ (80046b4 <__malloc_unlock+0x8>)
 80046ae:	f7ff befe 	b.w	80044ae <__retarget_lock_release_recursive>
 80046b2:	bf00      	nop
 80046b4:	200004ac 	.word	0x200004ac

080046b8 <__ssputs_r>:
 80046b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046bc:	461f      	mov	r7, r3
 80046be:	688e      	ldr	r6, [r1, #8]
 80046c0:	4682      	mov	sl, r0
 80046c2:	42be      	cmp	r6, r7
 80046c4:	460c      	mov	r4, r1
 80046c6:	4690      	mov	r8, r2
 80046c8:	680b      	ldr	r3, [r1, #0]
 80046ca:	d82d      	bhi.n	8004728 <__ssputs_r+0x70>
 80046cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046d4:	d026      	beq.n	8004724 <__ssputs_r+0x6c>
 80046d6:	6965      	ldr	r5, [r4, #20]
 80046d8:	6909      	ldr	r1, [r1, #16]
 80046da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046de:	eba3 0901 	sub.w	r9, r3, r1
 80046e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046e6:	1c7b      	adds	r3, r7, #1
 80046e8:	444b      	add	r3, r9
 80046ea:	106d      	asrs	r5, r5, #1
 80046ec:	429d      	cmp	r5, r3
 80046ee:	bf38      	it	cc
 80046f0:	461d      	movcc	r5, r3
 80046f2:	0553      	lsls	r3, r2, #21
 80046f4:	d527      	bpl.n	8004746 <__ssputs_r+0x8e>
 80046f6:	4629      	mov	r1, r5
 80046f8:	f7ff ff52 	bl	80045a0 <_malloc_r>
 80046fc:	4606      	mov	r6, r0
 80046fe:	b360      	cbz	r0, 800475a <__ssputs_r+0xa2>
 8004700:	464a      	mov	r2, r9
 8004702:	6921      	ldr	r1, [r4, #16]
 8004704:	f7ff fed4 	bl	80044b0 <memcpy>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800470e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004712:	81a3      	strh	r3, [r4, #12]
 8004714:	6126      	str	r6, [r4, #16]
 8004716:	444e      	add	r6, r9
 8004718:	6026      	str	r6, [r4, #0]
 800471a:	463e      	mov	r6, r7
 800471c:	6165      	str	r5, [r4, #20]
 800471e:	eba5 0509 	sub.w	r5, r5, r9
 8004722:	60a5      	str	r5, [r4, #8]
 8004724:	42be      	cmp	r6, r7
 8004726:	d900      	bls.n	800472a <__ssputs_r+0x72>
 8004728:	463e      	mov	r6, r7
 800472a:	4632      	mov	r2, r6
 800472c:	4641      	mov	r1, r8
 800472e:	6820      	ldr	r0, [r4, #0]
 8004730:	f000 faac 	bl	8004c8c <memmove>
 8004734:	2000      	movs	r0, #0
 8004736:	68a3      	ldr	r3, [r4, #8]
 8004738:	1b9b      	subs	r3, r3, r6
 800473a:	60a3      	str	r3, [r4, #8]
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	4433      	add	r3, r6
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004746:	462a      	mov	r2, r5
 8004748:	f000 fad8 	bl	8004cfc <_realloc_r>
 800474c:	4606      	mov	r6, r0
 800474e:	2800      	cmp	r0, #0
 8004750:	d1e0      	bne.n	8004714 <__ssputs_r+0x5c>
 8004752:	4650      	mov	r0, sl
 8004754:	6921      	ldr	r1, [r4, #16]
 8004756:	f7ff feb9 	bl	80044cc <_free_r>
 800475a:	230c      	movs	r3, #12
 800475c:	f8ca 3000 	str.w	r3, [sl]
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	f04f 30ff 	mov.w	r0, #4294967295
 8004766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	e7e9      	b.n	8004742 <__ssputs_r+0x8a>
	...

08004770 <_svfiprintf_r>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	4698      	mov	r8, r3
 8004776:	898b      	ldrh	r3, [r1, #12]
 8004778:	4607      	mov	r7, r0
 800477a:	061b      	lsls	r3, r3, #24
 800477c:	460d      	mov	r5, r1
 800477e:	4614      	mov	r4, r2
 8004780:	b09d      	sub	sp, #116	@ 0x74
 8004782:	d510      	bpl.n	80047a6 <_svfiprintf_r+0x36>
 8004784:	690b      	ldr	r3, [r1, #16]
 8004786:	b973      	cbnz	r3, 80047a6 <_svfiprintf_r+0x36>
 8004788:	2140      	movs	r1, #64	@ 0x40
 800478a:	f7ff ff09 	bl	80045a0 <_malloc_r>
 800478e:	6028      	str	r0, [r5, #0]
 8004790:	6128      	str	r0, [r5, #16]
 8004792:	b930      	cbnz	r0, 80047a2 <_svfiprintf_r+0x32>
 8004794:	230c      	movs	r3, #12
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	b01d      	add	sp, #116	@ 0x74
 800479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a2:	2340      	movs	r3, #64	@ 0x40
 80047a4:	616b      	str	r3, [r5, #20]
 80047a6:	2300      	movs	r3, #0
 80047a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047aa:	2320      	movs	r3, #32
 80047ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047b0:	2330      	movs	r3, #48	@ 0x30
 80047b2:	f04f 0901 	mov.w	r9, #1
 80047b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004954 <_svfiprintf_r+0x1e4>
 80047be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047c2:	4623      	mov	r3, r4
 80047c4:	469a      	mov	sl, r3
 80047c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ca:	b10a      	cbz	r2, 80047d0 <_svfiprintf_r+0x60>
 80047cc:	2a25      	cmp	r2, #37	@ 0x25
 80047ce:	d1f9      	bne.n	80047c4 <_svfiprintf_r+0x54>
 80047d0:	ebba 0b04 	subs.w	fp, sl, r4
 80047d4:	d00b      	beq.n	80047ee <_svfiprintf_r+0x7e>
 80047d6:	465b      	mov	r3, fp
 80047d8:	4622      	mov	r2, r4
 80047da:	4629      	mov	r1, r5
 80047dc:	4638      	mov	r0, r7
 80047de:	f7ff ff6b 	bl	80046b8 <__ssputs_r>
 80047e2:	3001      	adds	r0, #1
 80047e4:	f000 80a7 	beq.w	8004936 <_svfiprintf_r+0x1c6>
 80047e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ea:	445a      	add	r2, fp
 80047ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80047ee:	f89a 3000 	ldrb.w	r3, [sl]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 809f 	beq.w	8004936 <_svfiprintf_r+0x1c6>
 80047f8:	2300      	movs	r3, #0
 80047fa:	f04f 32ff 	mov.w	r2, #4294967295
 80047fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004802:	f10a 0a01 	add.w	sl, sl, #1
 8004806:	9304      	str	r3, [sp, #16]
 8004808:	9307      	str	r3, [sp, #28]
 800480a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800480e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004810:	4654      	mov	r4, sl
 8004812:	2205      	movs	r2, #5
 8004814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004818:	484e      	ldr	r0, [pc, #312]	@ (8004954 <_svfiprintf_r+0x1e4>)
 800481a:	f000 fa61 	bl	8004ce0 <memchr>
 800481e:	9a04      	ldr	r2, [sp, #16]
 8004820:	b9d8      	cbnz	r0, 800485a <_svfiprintf_r+0xea>
 8004822:	06d0      	lsls	r0, r2, #27
 8004824:	bf44      	itt	mi
 8004826:	2320      	movmi	r3, #32
 8004828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800482c:	0711      	lsls	r1, r2, #28
 800482e:	bf44      	itt	mi
 8004830:	232b      	movmi	r3, #43	@ 0x2b
 8004832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004836:	f89a 3000 	ldrb.w	r3, [sl]
 800483a:	2b2a      	cmp	r3, #42	@ 0x2a
 800483c:	d015      	beq.n	800486a <_svfiprintf_r+0xfa>
 800483e:	4654      	mov	r4, sl
 8004840:	2000      	movs	r0, #0
 8004842:	f04f 0c0a 	mov.w	ip, #10
 8004846:	9a07      	ldr	r2, [sp, #28]
 8004848:	4621      	mov	r1, r4
 800484a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800484e:	3b30      	subs	r3, #48	@ 0x30
 8004850:	2b09      	cmp	r3, #9
 8004852:	d94b      	bls.n	80048ec <_svfiprintf_r+0x17c>
 8004854:	b1b0      	cbz	r0, 8004884 <_svfiprintf_r+0x114>
 8004856:	9207      	str	r2, [sp, #28]
 8004858:	e014      	b.n	8004884 <_svfiprintf_r+0x114>
 800485a:	eba0 0308 	sub.w	r3, r0, r8
 800485e:	fa09 f303 	lsl.w	r3, r9, r3
 8004862:	4313      	orrs	r3, r2
 8004864:	46a2      	mov	sl, r4
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	e7d2      	b.n	8004810 <_svfiprintf_r+0xa0>
 800486a:	9b03      	ldr	r3, [sp, #12]
 800486c:	1d19      	adds	r1, r3, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	9103      	str	r1, [sp, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	bfbb      	ittet	lt
 8004876:	425b      	neglt	r3, r3
 8004878:	f042 0202 	orrlt.w	r2, r2, #2
 800487c:	9307      	strge	r3, [sp, #28]
 800487e:	9307      	strlt	r3, [sp, #28]
 8004880:	bfb8      	it	lt
 8004882:	9204      	strlt	r2, [sp, #16]
 8004884:	7823      	ldrb	r3, [r4, #0]
 8004886:	2b2e      	cmp	r3, #46	@ 0x2e
 8004888:	d10a      	bne.n	80048a0 <_svfiprintf_r+0x130>
 800488a:	7863      	ldrb	r3, [r4, #1]
 800488c:	2b2a      	cmp	r3, #42	@ 0x2a
 800488e:	d132      	bne.n	80048f6 <_svfiprintf_r+0x186>
 8004890:	9b03      	ldr	r3, [sp, #12]
 8004892:	3402      	adds	r4, #2
 8004894:	1d1a      	adds	r2, r3, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	9203      	str	r2, [sp, #12]
 800489a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800489e:	9305      	str	r3, [sp, #20]
 80048a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004958 <_svfiprintf_r+0x1e8>
 80048a4:	2203      	movs	r2, #3
 80048a6:	4650      	mov	r0, sl
 80048a8:	7821      	ldrb	r1, [r4, #0]
 80048aa:	f000 fa19 	bl	8004ce0 <memchr>
 80048ae:	b138      	cbz	r0, 80048c0 <_svfiprintf_r+0x150>
 80048b0:	2240      	movs	r2, #64	@ 0x40
 80048b2:	9b04      	ldr	r3, [sp, #16]
 80048b4:	eba0 000a 	sub.w	r0, r0, sl
 80048b8:	4082      	lsls	r2, r0
 80048ba:	4313      	orrs	r3, r2
 80048bc:	3401      	adds	r4, #1
 80048be:	9304      	str	r3, [sp, #16]
 80048c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c4:	2206      	movs	r2, #6
 80048c6:	4825      	ldr	r0, [pc, #148]	@ (800495c <_svfiprintf_r+0x1ec>)
 80048c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048cc:	f000 fa08 	bl	8004ce0 <memchr>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d036      	beq.n	8004942 <_svfiprintf_r+0x1d2>
 80048d4:	4b22      	ldr	r3, [pc, #136]	@ (8004960 <_svfiprintf_r+0x1f0>)
 80048d6:	bb1b      	cbnz	r3, 8004920 <_svfiprintf_r+0x1b0>
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	3307      	adds	r3, #7
 80048dc:	f023 0307 	bic.w	r3, r3, #7
 80048e0:	3308      	adds	r3, #8
 80048e2:	9303      	str	r3, [sp, #12]
 80048e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048e6:	4433      	add	r3, r6
 80048e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ea:	e76a      	b.n	80047c2 <_svfiprintf_r+0x52>
 80048ec:	460c      	mov	r4, r1
 80048ee:	2001      	movs	r0, #1
 80048f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80048f4:	e7a8      	b.n	8004848 <_svfiprintf_r+0xd8>
 80048f6:	2300      	movs	r3, #0
 80048f8:	f04f 0c0a 	mov.w	ip, #10
 80048fc:	4619      	mov	r1, r3
 80048fe:	3401      	adds	r4, #1
 8004900:	9305      	str	r3, [sp, #20]
 8004902:	4620      	mov	r0, r4
 8004904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004908:	3a30      	subs	r2, #48	@ 0x30
 800490a:	2a09      	cmp	r2, #9
 800490c:	d903      	bls.n	8004916 <_svfiprintf_r+0x1a6>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0c6      	beq.n	80048a0 <_svfiprintf_r+0x130>
 8004912:	9105      	str	r1, [sp, #20]
 8004914:	e7c4      	b.n	80048a0 <_svfiprintf_r+0x130>
 8004916:	4604      	mov	r4, r0
 8004918:	2301      	movs	r3, #1
 800491a:	fb0c 2101 	mla	r1, ip, r1, r2
 800491e:	e7f0      	b.n	8004902 <_svfiprintf_r+0x192>
 8004920:	ab03      	add	r3, sp, #12
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	462a      	mov	r2, r5
 8004926:	4638      	mov	r0, r7
 8004928:	4b0e      	ldr	r3, [pc, #56]	@ (8004964 <_svfiprintf_r+0x1f4>)
 800492a:	a904      	add	r1, sp, #16
 800492c:	f3af 8000 	nop.w
 8004930:	1c42      	adds	r2, r0, #1
 8004932:	4606      	mov	r6, r0
 8004934:	d1d6      	bne.n	80048e4 <_svfiprintf_r+0x174>
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	065b      	lsls	r3, r3, #25
 800493a:	f53f af2d 	bmi.w	8004798 <_svfiprintf_r+0x28>
 800493e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004940:	e72c      	b.n	800479c <_svfiprintf_r+0x2c>
 8004942:	ab03      	add	r3, sp, #12
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	462a      	mov	r2, r5
 8004948:	4638      	mov	r0, r7
 800494a:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <_svfiprintf_r+0x1f4>)
 800494c:	a904      	add	r1, sp, #16
 800494e:	f000 f87d 	bl	8004a4c <_printf_i>
 8004952:	e7ed      	b.n	8004930 <_svfiprintf_r+0x1c0>
 8004954:	08004e0e 	.word	0x08004e0e
 8004958:	08004e14 	.word	0x08004e14
 800495c:	08004e18 	.word	0x08004e18
 8004960:	00000000 	.word	0x00000000
 8004964:	080046b9 	.word	0x080046b9

08004968 <_printf_common>:
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	4616      	mov	r6, r2
 800496e:	4698      	mov	r8, r3
 8004970:	688a      	ldr	r2, [r1, #8]
 8004972:	690b      	ldr	r3, [r1, #16]
 8004974:	4607      	mov	r7, r0
 8004976:	4293      	cmp	r3, r2
 8004978:	bfb8      	it	lt
 800497a:	4613      	movlt	r3, r2
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004982:	460c      	mov	r4, r1
 8004984:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004988:	b10a      	cbz	r2, 800498e <_printf_common+0x26>
 800498a:	3301      	adds	r3, #1
 800498c:	6033      	str	r3, [r6, #0]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	0699      	lsls	r1, r3, #26
 8004992:	bf42      	ittt	mi
 8004994:	6833      	ldrmi	r3, [r6, #0]
 8004996:	3302      	addmi	r3, #2
 8004998:	6033      	strmi	r3, [r6, #0]
 800499a:	6825      	ldr	r5, [r4, #0]
 800499c:	f015 0506 	ands.w	r5, r5, #6
 80049a0:	d106      	bne.n	80049b0 <_printf_common+0x48>
 80049a2:	f104 0a19 	add.w	sl, r4, #25
 80049a6:	68e3      	ldr	r3, [r4, #12]
 80049a8:	6832      	ldr	r2, [r6, #0]
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	42ab      	cmp	r3, r5
 80049ae:	dc2b      	bgt.n	8004a08 <_printf_common+0xa0>
 80049b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	3b00      	subs	r3, #0
 80049b8:	bf18      	it	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	0692      	lsls	r2, r2, #26
 80049be:	d430      	bmi.n	8004a22 <_printf_common+0xba>
 80049c0:	4641      	mov	r1, r8
 80049c2:	4638      	mov	r0, r7
 80049c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049c8:	47c8      	blx	r9
 80049ca:	3001      	adds	r0, #1
 80049cc:	d023      	beq.n	8004a16 <_printf_common+0xae>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	6922      	ldr	r2, [r4, #16]
 80049d2:	f003 0306 	and.w	r3, r3, #6
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf14      	ite	ne
 80049da:	2500      	movne	r5, #0
 80049dc:	6833      	ldreq	r3, [r6, #0]
 80049de:	f04f 0600 	mov.w	r6, #0
 80049e2:	bf08      	it	eq
 80049e4:	68e5      	ldreq	r5, [r4, #12]
 80049e6:	f104 041a 	add.w	r4, r4, #26
 80049ea:	bf08      	it	eq
 80049ec:	1aed      	subeq	r5, r5, r3
 80049ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80049f2:	bf08      	it	eq
 80049f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f8:	4293      	cmp	r3, r2
 80049fa:	bfc4      	itt	gt
 80049fc:	1a9b      	subgt	r3, r3, r2
 80049fe:	18ed      	addgt	r5, r5, r3
 8004a00:	42b5      	cmp	r5, r6
 8004a02:	d11a      	bne.n	8004a3a <_printf_common+0xd2>
 8004a04:	2000      	movs	r0, #0
 8004a06:	e008      	b.n	8004a1a <_printf_common+0xb2>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4652      	mov	r2, sl
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	4638      	mov	r0, r7
 8004a10:	47c8      	blx	r9
 8004a12:	3001      	adds	r0, #1
 8004a14:	d103      	bne.n	8004a1e <_printf_common+0xb6>
 8004a16:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1e:	3501      	adds	r5, #1
 8004a20:	e7c1      	b.n	80049a6 <_printf_common+0x3e>
 8004a22:	2030      	movs	r0, #48	@ 0x30
 8004a24:	18e1      	adds	r1, r4, r3
 8004a26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a30:	4422      	add	r2, r4
 8004a32:	3302      	adds	r3, #2
 8004a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a38:	e7c2      	b.n	80049c0 <_printf_common+0x58>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4641      	mov	r1, r8
 8004a40:	4638      	mov	r0, r7
 8004a42:	47c8      	blx	r9
 8004a44:	3001      	adds	r0, #1
 8004a46:	d0e6      	beq.n	8004a16 <_printf_common+0xae>
 8004a48:	3601      	adds	r6, #1
 8004a4a:	e7d9      	b.n	8004a00 <_printf_common+0x98>

08004a4c <_printf_i>:
 8004a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	7e0f      	ldrb	r7, [r1, #24]
 8004a52:	4691      	mov	r9, r2
 8004a54:	2f78      	cmp	r7, #120	@ 0x78
 8004a56:	4680      	mov	r8, r0
 8004a58:	460c      	mov	r4, r1
 8004a5a:	469a      	mov	sl, r3
 8004a5c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a62:	d807      	bhi.n	8004a74 <_printf_i+0x28>
 8004a64:	2f62      	cmp	r7, #98	@ 0x62
 8004a66:	d80a      	bhi.n	8004a7e <_printf_i+0x32>
 8004a68:	2f00      	cmp	r7, #0
 8004a6a:	f000 80d3 	beq.w	8004c14 <_printf_i+0x1c8>
 8004a6e:	2f58      	cmp	r7, #88	@ 0x58
 8004a70:	f000 80ba 	beq.w	8004be8 <_printf_i+0x19c>
 8004a74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a7c:	e03a      	b.n	8004af4 <_printf_i+0xa8>
 8004a7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a82:	2b15      	cmp	r3, #21
 8004a84:	d8f6      	bhi.n	8004a74 <_printf_i+0x28>
 8004a86:	a101      	add	r1, pc, #4	@ (adr r1, 8004a8c <_printf_i+0x40>)
 8004a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a8c:	08004ae5 	.word	0x08004ae5
 8004a90:	08004af9 	.word	0x08004af9
 8004a94:	08004a75 	.word	0x08004a75
 8004a98:	08004a75 	.word	0x08004a75
 8004a9c:	08004a75 	.word	0x08004a75
 8004aa0:	08004a75 	.word	0x08004a75
 8004aa4:	08004af9 	.word	0x08004af9
 8004aa8:	08004a75 	.word	0x08004a75
 8004aac:	08004a75 	.word	0x08004a75
 8004ab0:	08004a75 	.word	0x08004a75
 8004ab4:	08004a75 	.word	0x08004a75
 8004ab8:	08004bfb 	.word	0x08004bfb
 8004abc:	08004b23 	.word	0x08004b23
 8004ac0:	08004bb5 	.word	0x08004bb5
 8004ac4:	08004a75 	.word	0x08004a75
 8004ac8:	08004a75 	.word	0x08004a75
 8004acc:	08004c1d 	.word	0x08004c1d
 8004ad0:	08004a75 	.word	0x08004a75
 8004ad4:	08004b23 	.word	0x08004b23
 8004ad8:	08004a75 	.word	0x08004a75
 8004adc:	08004a75 	.word	0x08004a75
 8004ae0:	08004bbd 	.word	0x08004bbd
 8004ae4:	6833      	ldr	r3, [r6, #0]
 8004ae6:	1d1a      	adds	r2, r3, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6032      	str	r2, [r6, #0]
 8004aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004af0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004af4:	2301      	movs	r3, #1
 8004af6:	e09e      	b.n	8004c36 <_printf_i+0x1ea>
 8004af8:	6833      	ldr	r3, [r6, #0]
 8004afa:	6820      	ldr	r0, [r4, #0]
 8004afc:	1d19      	adds	r1, r3, #4
 8004afe:	6031      	str	r1, [r6, #0]
 8004b00:	0606      	lsls	r6, r0, #24
 8004b02:	d501      	bpl.n	8004b08 <_printf_i+0xbc>
 8004b04:	681d      	ldr	r5, [r3, #0]
 8004b06:	e003      	b.n	8004b10 <_printf_i+0xc4>
 8004b08:	0645      	lsls	r5, r0, #25
 8004b0a:	d5fb      	bpl.n	8004b04 <_printf_i+0xb8>
 8004b0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b10:	2d00      	cmp	r5, #0
 8004b12:	da03      	bge.n	8004b1c <_printf_i+0xd0>
 8004b14:	232d      	movs	r3, #45	@ 0x2d
 8004b16:	426d      	negs	r5, r5
 8004b18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b1c:	230a      	movs	r3, #10
 8004b1e:	4859      	ldr	r0, [pc, #356]	@ (8004c84 <_printf_i+0x238>)
 8004b20:	e011      	b.n	8004b46 <_printf_i+0xfa>
 8004b22:	6821      	ldr	r1, [r4, #0]
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	0608      	lsls	r0, r1, #24
 8004b28:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b2c:	d402      	bmi.n	8004b34 <_printf_i+0xe8>
 8004b2e:	0649      	lsls	r1, r1, #25
 8004b30:	bf48      	it	mi
 8004b32:	b2ad      	uxthmi	r5, r5
 8004b34:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b36:	6033      	str	r3, [r6, #0]
 8004b38:	bf14      	ite	ne
 8004b3a:	230a      	movne	r3, #10
 8004b3c:	2308      	moveq	r3, #8
 8004b3e:	4851      	ldr	r0, [pc, #324]	@ (8004c84 <_printf_i+0x238>)
 8004b40:	2100      	movs	r1, #0
 8004b42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b46:	6866      	ldr	r6, [r4, #4]
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	bfa8      	it	ge
 8004b4c:	6821      	ldrge	r1, [r4, #0]
 8004b4e:	60a6      	str	r6, [r4, #8]
 8004b50:	bfa4      	itt	ge
 8004b52:	f021 0104 	bicge.w	r1, r1, #4
 8004b56:	6021      	strge	r1, [r4, #0]
 8004b58:	b90d      	cbnz	r5, 8004b5e <_printf_i+0x112>
 8004b5a:	2e00      	cmp	r6, #0
 8004b5c:	d04b      	beq.n	8004bf6 <_printf_i+0x1aa>
 8004b5e:	4616      	mov	r6, r2
 8004b60:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b64:	fb03 5711 	mls	r7, r3, r1, r5
 8004b68:	5dc7      	ldrb	r7, [r0, r7]
 8004b6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b6e:	462f      	mov	r7, r5
 8004b70:	42bb      	cmp	r3, r7
 8004b72:	460d      	mov	r5, r1
 8004b74:	d9f4      	bls.n	8004b60 <_printf_i+0x114>
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d10b      	bne.n	8004b92 <_printf_i+0x146>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	07df      	lsls	r7, r3, #31
 8004b7e:	d508      	bpl.n	8004b92 <_printf_i+0x146>
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	6861      	ldr	r1, [r4, #4]
 8004b84:	4299      	cmp	r1, r3
 8004b86:	bfde      	ittt	le
 8004b88:	2330      	movle	r3, #48	@ 0x30
 8004b8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b92:	1b92      	subs	r2, r2, r6
 8004b94:	6122      	str	r2, [r4, #16]
 8004b96:	464b      	mov	r3, r9
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	f8cd a000 	str.w	sl, [sp]
 8004ba0:	aa03      	add	r2, sp, #12
 8004ba2:	f7ff fee1 	bl	8004968 <_printf_common>
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d14a      	bne.n	8004c40 <_printf_i+0x1f4>
 8004baa:	f04f 30ff 	mov.w	r0, #4294967295
 8004bae:	b004      	add	sp, #16
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	2778      	movs	r7, #120	@ 0x78
 8004bbe:	4832      	ldr	r0, [pc, #200]	@ (8004c88 <_printf_i+0x23c>)
 8004bc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	6831      	ldr	r1, [r6, #0]
 8004bc8:	061f      	lsls	r7, r3, #24
 8004bca:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bce:	d402      	bmi.n	8004bd6 <_printf_i+0x18a>
 8004bd0:	065f      	lsls	r7, r3, #25
 8004bd2:	bf48      	it	mi
 8004bd4:	b2ad      	uxthmi	r5, r5
 8004bd6:	6031      	str	r1, [r6, #0]
 8004bd8:	07d9      	lsls	r1, r3, #31
 8004bda:	bf44      	itt	mi
 8004bdc:	f043 0320 	orrmi.w	r3, r3, #32
 8004be0:	6023      	strmi	r3, [r4, #0]
 8004be2:	b11d      	cbz	r5, 8004bec <_printf_i+0x1a0>
 8004be4:	2310      	movs	r3, #16
 8004be6:	e7ab      	b.n	8004b40 <_printf_i+0xf4>
 8004be8:	4826      	ldr	r0, [pc, #152]	@ (8004c84 <_printf_i+0x238>)
 8004bea:	e7e9      	b.n	8004bc0 <_printf_i+0x174>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f023 0320 	bic.w	r3, r3, #32
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	e7f6      	b.n	8004be4 <_printf_i+0x198>
 8004bf6:	4616      	mov	r6, r2
 8004bf8:	e7bd      	b.n	8004b76 <_printf_i+0x12a>
 8004bfa:	6833      	ldr	r3, [r6, #0]
 8004bfc:	6825      	ldr	r5, [r4, #0]
 8004bfe:	1d18      	adds	r0, r3, #4
 8004c00:	6961      	ldr	r1, [r4, #20]
 8004c02:	6030      	str	r0, [r6, #0]
 8004c04:	062e      	lsls	r6, r5, #24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	d501      	bpl.n	8004c0e <_printf_i+0x1c2>
 8004c0a:	6019      	str	r1, [r3, #0]
 8004c0c:	e002      	b.n	8004c14 <_printf_i+0x1c8>
 8004c0e:	0668      	lsls	r0, r5, #25
 8004c10:	d5fb      	bpl.n	8004c0a <_printf_i+0x1be>
 8004c12:	8019      	strh	r1, [r3, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	4616      	mov	r6, r2
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	e7bc      	b.n	8004b96 <_printf_i+0x14a>
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	1d1a      	adds	r2, r3, #4
 8004c22:	6032      	str	r2, [r6, #0]
 8004c24:	681e      	ldr	r6, [r3, #0]
 8004c26:	6862      	ldr	r2, [r4, #4]
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f000 f859 	bl	8004ce0 <memchr>
 8004c2e:	b108      	cbz	r0, 8004c34 <_printf_i+0x1e8>
 8004c30:	1b80      	subs	r0, r0, r6
 8004c32:	6060      	str	r0, [r4, #4]
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c3e:	e7aa      	b.n	8004b96 <_printf_i+0x14a>
 8004c40:	4632      	mov	r2, r6
 8004c42:	4649      	mov	r1, r9
 8004c44:	4640      	mov	r0, r8
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	47d0      	blx	sl
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0ad      	beq.n	8004baa <_printf_i+0x15e>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	079b      	lsls	r3, r3, #30
 8004c52:	d413      	bmi.n	8004c7c <_printf_i+0x230>
 8004c54:	68e0      	ldr	r0, [r4, #12]
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	bfb8      	it	lt
 8004c5c:	4618      	movlt	r0, r3
 8004c5e:	e7a6      	b.n	8004bae <_printf_i+0x162>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4632      	mov	r2, r6
 8004c64:	4649      	mov	r1, r9
 8004c66:	4640      	mov	r0, r8
 8004c68:	47d0      	blx	sl
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d09d      	beq.n	8004baa <_printf_i+0x15e>
 8004c6e:	3501      	adds	r5, #1
 8004c70:	68e3      	ldr	r3, [r4, #12]
 8004c72:	9903      	ldr	r1, [sp, #12]
 8004c74:	1a5b      	subs	r3, r3, r1
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	dcf2      	bgt.n	8004c60 <_printf_i+0x214>
 8004c7a:	e7eb      	b.n	8004c54 <_printf_i+0x208>
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	f104 0619 	add.w	r6, r4, #25
 8004c82:	e7f5      	b.n	8004c70 <_printf_i+0x224>
 8004c84:	08004e1f 	.word	0x08004e1f
 8004c88:	08004e30 	.word	0x08004e30

08004c8c <memmove>:
 8004c8c:	4288      	cmp	r0, r1
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	eb01 0402 	add.w	r4, r1, r2
 8004c94:	d902      	bls.n	8004c9c <memmove+0x10>
 8004c96:	4284      	cmp	r4, r0
 8004c98:	4623      	mov	r3, r4
 8004c9a:	d807      	bhi.n	8004cac <memmove+0x20>
 8004c9c:	1e43      	subs	r3, r0, #1
 8004c9e:	42a1      	cmp	r1, r4
 8004ca0:	d008      	beq.n	8004cb4 <memmove+0x28>
 8004ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004caa:	e7f8      	b.n	8004c9e <memmove+0x12>
 8004cac:	4601      	mov	r1, r0
 8004cae:	4402      	add	r2, r0
 8004cb0:	428a      	cmp	r2, r1
 8004cb2:	d100      	bne.n	8004cb6 <memmove+0x2a>
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cbe:	e7f7      	b.n	8004cb0 <memmove+0x24>

08004cc0 <_sbrk_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4d05      	ldr	r5, [pc, #20]	@ (8004cdc <_sbrk_r+0x1c>)
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fc f8a4 	bl	8000e18 <_sbrk>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_sbrk_r+0x1a>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_sbrk_r+0x1a>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	200004a8 	.word	0x200004a8

08004ce0 <memchr>:
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	b2c9      	uxtb	r1, r1
 8004ce6:	4402      	add	r2, r0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	d101      	bne.n	8004cf2 <memchr+0x12>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e003      	b.n	8004cfa <memchr+0x1a>
 8004cf2:	7804      	ldrb	r4, [r0, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	428c      	cmp	r4, r1
 8004cf8:	d1f6      	bne.n	8004ce8 <memchr+0x8>
 8004cfa:	bd10      	pop	{r4, pc}

08004cfc <_realloc_r>:
 8004cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d00:	4680      	mov	r8, r0
 8004d02:	4615      	mov	r5, r2
 8004d04:	460c      	mov	r4, r1
 8004d06:	b921      	cbnz	r1, 8004d12 <_realloc_r+0x16>
 8004d08:	4611      	mov	r1, r2
 8004d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0e:	f7ff bc47 	b.w	80045a0 <_malloc_r>
 8004d12:	b92a      	cbnz	r2, 8004d20 <_realloc_r+0x24>
 8004d14:	f7ff fbda 	bl	80044cc <_free_r>
 8004d18:	2400      	movs	r4, #0
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d20:	f000 f81a 	bl	8004d58 <_malloc_usable_size_r>
 8004d24:	4285      	cmp	r5, r0
 8004d26:	4606      	mov	r6, r0
 8004d28:	d802      	bhi.n	8004d30 <_realloc_r+0x34>
 8004d2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d2e:	d8f4      	bhi.n	8004d1a <_realloc_r+0x1e>
 8004d30:	4629      	mov	r1, r5
 8004d32:	4640      	mov	r0, r8
 8004d34:	f7ff fc34 	bl	80045a0 <_malloc_r>
 8004d38:	4607      	mov	r7, r0
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d0ec      	beq.n	8004d18 <_realloc_r+0x1c>
 8004d3e:	42b5      	cmp	r5, r6
 8004d40:	462a      	mov	r2, r5
 8004d42:	4621      	mov	r1, r4
 8004d44:	bf28      	it	cs
 8004d46:	4632      	movcs	r2, r6
 8004d48:	f7ff fbb2 	bl	80044b0 <memcpy>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4640      	mov	r0, r8
 8004d50:	f7ff fbbc 	bl	80044cc <_free_r>
 8004d54:	463c      	mov	r4, r7
 8004d56:	e7e0      	b.n	8004d1a <_realloc_r+0x1e>

08004d58 <_malloc_usable_size_r>:
 8004d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d5c:	1f18      	subs	r0, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bfbc      	itt	lt
 8004d62:	580b      	ldrlt	r3, [r1, r0]
 8004d64:	18c0      	addlt	r0, r0, r3
 8004d66:	4770      	bx	lr

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
